<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mac必装软件</title>
      <link href="/2021/09/17/Mac%E5%BF%85%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
      <url>/2021/09/17/Mac%E5%BF%85%E8%A3%85%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="系统软件">系统软件</h2><ol><li><a href="https://www.jianshu.com/p/b7b789a2ed2c">homebrew</a></li><li><a href="https://www.jianshu.com/p/4fc53d7d7620">mysql</a></li><li><a href="https://github.com/pyenv/pyenv#homebrew-on-macos">pyenv</a></li><li><a href="https://www.runoob.com/w3cnote/nvm-manager-node-versions.html">nvm</a></li><li><a href="">redis</a> 直接<code>brew install redis</code>即可</li></ol><h2 id="Mac必装软件">Mac必装软件</h2><ol><li><a href="https://iina.io/">IINA</a> 最好用的音视频播放软件（可播放任何地址</li><li><a href="https://www.typora.io/">Typora</a> 最好用的Markdown编辑工具 （➕<code>PicGo</code>实现图片自动上传</li><li><a href="https://code.visualstudio.com/">VsCode</a> 最好用的代码编辑工具</li><li><a href="http://www.neatdownloadmanager.com/index.php/en/">Neat Download Manager</a> 最快速的下载工具</li><li><a href="https://github.com/electerm/electerm">Electerm</a> 开源的跨平台Shell管理工具</li><li><a href="http://www.hostbuf.com/">FinalShell</a> 最好用跨平台Shell管理工具，就是不开源</li><li><a href="https://lemon.qq.com/">Tencent Lemon</a> 类似于CleanMyMac，但是完全免费</li><li><a href="https://apps.apple.com/cn/app/xmind-2020-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/id1327661892?mt=12">xmind</a> 思维导图</li><li><a href="https://apps.apple.com/cn/app/wps-office/id1443749478?mt=12">wps</a> 好用的文档中心</li><li><a href="https://tlanyan.me/v2ray-clients-download/">V2ray</a> mac 推荐<code>v2rayu</code>, win推荐<code>v2rayn</code> （免费订阅<a href="https://github.com/freefq/free">free</a> <a href="https://youjinnode.com/#/">幽禁节点</a></li></ol><hr><p>可选软件</p><ol><li><a href="https://obsproject.com/">OBS</a> 强大的推流工具</li><li><a href="https://apps.apple.com/cn/app/ishot-%E4%BC%98%E7%A7%80%E7%9A%84%E6%88%AA%E5%9B%BE%E5%BD%95%E5%B1%8F%E5%B7%A5%E5%85%B7/id1485844094?mt=12">ishot</a> 截图、长截图、贴图、标注、取色、录屏，样样优秀</li><li><a href="https://github.com/Molunerfinn/PicGo/">PicGo</a> 一个用于快速上传图片并获取图片 URL 链接的工具</li><li><a href="https://www.macwk.com/soft/daisydisk">Daisy Disk</a> 磁盘大小管理</li><li><a href="https://apps.apple.com/cn/app/pixeur-%E5%B1%8F%E5%B9%95%E6%8B%BE%E8%89%B2%E5%99%A8/id1507890049?mt=12">Pixeur - 屏幕拾色器</a> 取色器</li><li><a href="https://www.zhinin.com/parallels_desktop_15-mac.html">Parallels Desktop</a> 虚拟机管理 <a href="https://mp.weixin.qq.com/s/HpHRrJrUh7PJRYAWhusk-g">big sur</a></li><li><a href="https://www.macwk.com/soft/navicat-premium">Navicat Premium</a> 数据库管理</li></ol><p>MAC破解软件网址</p><ol><li><a href="https://www.macwk.com/">macwk</a></li><li><a href="https://www.zhinin.com/">知您网</a></li><li><a href="https://xclient.info/">XClient</a></li><li><a href="http://www.ruanman.net/?s=parallels">软曼网</a></li></ol><p>Chrome 插件</p><ol><li><a href="https://chrome.google.com/webstore/detail/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D-%E8%81%9A%E5%90%88%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/cdonnmffkdaoajfknoeeecmchibpmkmg?utm_source=chrome-ntp-icon">沙拉查词</a> 划词翻译</li><li><a href="https://chrome.google.com/webstore/detail/infinity-new-tab-pro/nnnkddnnlpamobajfibfdgfnbcnkgngh?utm_source=chrome-ntp-icon">infinity pro</a> 新标签</li></ol><h2 id="Mac-常见问题">Mac 常见问题</h2><h3 id="刷新DNS">刷新DNS</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dscacheutil -flushcache</span><br><span class="line">sudo killall -HUP mDNSResponder</span><br></pre></td></tr></tbody></table></figure><h3 id="xxx-app已损坏-打不开-你应该将它移到废纸篓-已解决">xxx.app已损坏,打不开.你应该将它移到废纸篓-已解决</h3><ol><li><p>系统偏好设置… -&gt; 安全性与隐私–&gt;修改为任何来源</p></li><li><p>serria里面没有“任何来源”这一项，需要打开终端执行sudo spctl --master-disable，这个时候再去系统偏好设置… -&gt; 安全性与隐私 是不是发现有了“任何来源”这一项</p></li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 允许任何来源的软件</span><br><span class="line">sudo spctl --master-disable</span><br><span class="line"># 关闭</span><br><span class="line">sudo spctl --master-enable</span><br></pre></td></tr></tbody></table></figure><h3 id="已经勾选“允许任何来源”，为啥还是提示“文件已损坏”">已经勾选“允许任何来源”，为啥还是提示“文件已损坏”</h3><p>打开终端，在终端中粘贴下面命令：【<code>sudo xattr -r -d com.apple.quarantine </code>】 ,然后输入个空格，再将应用程序目录中的软件拖拽到命令后面，按回车后输入密码执行。<br>比如：Sketch的命令是 sudo xattr -r -d com.apple.quarantine /Applications/Sketch.app<br>亲测可行</p><h3 id="MAC查看端口占用情况">MAC查看端口占用情况</h3><ul><li>lsof -i tcp:port  （port替换成端口号，比如6379）可以查看该端口被什么程序占用</li><li>kill port 关闭端口</li></ul><h3 id="显示finder的所有文件，包括隐藏文件">显示finder的所有文件，包括隐藏文件</h3><p><code>defaults write com.apple.Finder AppleShowAllFiles true</code><br>然后按住option+右击finder，重启finder<br><code>Command shift .</code> 隐藏显示隐藏文件</p><h3 id="Q-Can’t-chown-usr-local-in-High-Sierra">Q:Can’t chown /usr/local in High Sierra</h3><p>A:sudo chown -R $(whoami) $(brew --prefix)/*</p><h3 id="Xcode-支持库">Xcode 支持库</h3><p>链接：<a href="https://pan.baidu.com/s/1zXEFlt94bz3O1e3GdtG92w">https://pan.baidu.com/s/1zXEFlt94bz3O1e3GdtG92w</a> 密码: rc4k<br>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport</p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora+GitHub+PicGo打造丝滑的编辑体验</title>
      <link href="/2021/09/17/Typora-GitHub-PicGo%E6%89%93%E9%80%A0%E4%B8%9D%E6%BB%91%E7%9A%84%E7%BC%96%E8%BE%91%E4%BD%93%E9%AA%8C/"/>
      <url>/2021/09/17/Typora-GitHub-PicGo%E6%89%93%E9%80%A0%E4%B8%9D%E6%BB%91%E7%9A%84%E7%BC%96%E8%BE%91%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="前文">前文</h3><p>很多时候我们都需要一个公共的资源地址来存储自己的文章等信息，作为一个coder，那当然是要用我们专属的语言来写日记了（markdown）。这里就给大家讲解一下如何使用<a href="https://www.typora.io">typora</a> + <a href="https://github.com/Molunerfinn/PicGo">PicGo</a> + <a href="https://github.com/">github</a> 打造专属的编辑&amp;存储方式。</p><h3 id="准备">准备</h3><p>一、从上面的链接中下载并安装<code>typora</code>和<code>PicGo</code><br>二、 登录<code>github</code>账号</p><ol><li>创建公开资源库<br><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/image-20210917113156228.png" alt="image-20210917113156228"></li><li>生成新令牌</li></ol><ul><li><p>依次点击 右上角点<code>用户头像</code> -&gt; <code>Settings</code> -&gt; <code>Developer settings</code> -&gt;  <code>Personal access tokens</code>）-&gt; <code>Generate new token</code><br><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/image-20210917113803036.png" alt="image-20210917113803036"></p></li><li><p>设置令牌描述性名称，过期时间看自己情况选择，<code>Select scopes</code>只勾选：<code>repo</code>、 <code>user</code><br><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/image-20210917114208452.png" alt="image-20210917114208452"></p></li><li><p><code>Generate token</code> 生成令牌 <strong>⚠️令牌只显示一次，一定要复制保存好</strong></p></li></ul><h3 id="设置PicGo图床">设置PicGo图床</h3><ol><li><p>打开<code>picgo</code>后在顶部菜单栏<code>右击图标</code>，选择<code>打开详情窗口</code>，选择<code>PicGo设置</code>并勾选<code>GitHub图床</code>；就会在<code>图床设置</code>处显示图床<br><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/image-20210917115945814.png" alt="image-20210917115945814"></p></li><li><p>配置<code>GitHub图床</code></p></li></ol><ul><li>填写github账号名： <code>github账户/仓库名</code></li><li>一般为master或者main，具体看你的建的仓库</li><li>个人令牌，就是之前在github中生成私人令牌时得到的一串字符串</li><li>图片存放在仓库下面的哪个目录，不填就在项目的根目</li><li>默认的域名无法访问，修改为官方<code>https://raw.githubusercontent.com/github账户/仓库名/master/img/icon.png</code> 或者 CDN域名<code>https://cdn.jsdelivr.net/gh/github账户/仓库名/img/icon.png</code>，推荐使用cdn域名<br><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/image-20210917120159803.png" alt="image-20210917120159803"></li></ul><ol start="3"><li>复制任意图片后，点击菜单栏应用图标，即可看到图片上传</li></ol><h3 id="typora图片上传">typora图片上传</h3><ol><li>打开<code>typora</code>的<code>偏好设置</code>下的<code>图像</code></li><li><code>插入图片时</code>默认<code>无操作</code>，根据情况选择是否<code>上传图片</code>；勾选以下选项</li></ol><ul><li>对本地位置的图片应用上述规则</li></ul><ol start="3"><li><code>上传服务</code> 选<code>PicGo.app</code>后即可</li></ol><p><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/image-20210917111332765.png" alt="image-20210917114821536"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">同样的，该文章就是以配置好的Typora编写的，所有截图复制后就上传并替换链接为cdn域名，简直方便的不行。</span><br><span class="line">顺便说下改文章的截图工具为ishot，自动阴影注释等👍</span><br></pre></td></tr></tbody></table></figure><ul><li><a href="https://apps.apple.com/cn/app/ishot-%E6%88%AA%E5%9B%BE-%E9%95%BF%E6%88%AA%E5%9B%BE-%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7/id1485844094?mt=12">ishot</a> Mac上最强的截图工具</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Swift 5.1 高帧率朋友圈实现</title>
      <link href="/2020/04/29/Swift-5-1-%E9%AB%98%E5%B8%A7%E7%8E%87%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/04/29/Swift-5-1-%E9%AB%98%E5%B8%A7%E7%8E%87%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文基于**<a href="https://github.com/Instagram/IGListKit">IGListKit 4.0</a>**实现列表的高帧率滑动效果，项目地址见<a href="https://github.com/jeromexiong/cover-moments">GitHub</a></p></blockquote><h2 id="话不多说，上图">话不多说，上图</h2><p><img src="/images/moments.webp" alt="moments.webp.gif"></p><h2 id="创建基类控制器">创建基类控制器</h2><p>所有<code>IGListKit</code>的视图控制器都应该继承此类，减少复用</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseListVC</span>: <span class="title">UIViewController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> objects: [<span class="type">ListDiffable</span>] <span class="operator">=</span> [<span class="type">ListDiffable</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">var</span> collectionView: <span class="type">UICollectionView</span> <span class="operator">=</span> {</span><br><span class="line">        <span class="keyword">let</span> flow <span class="operator">=</span> <span class="type">UICollectionViewFlowLayout</span>()</span><br><span class="line">        <span class="keyword">let</span> collectionView <span class="operator">=</span> <span class="type">UICollectionView</span>(frame: <span class="type">CGRect</span>.zero, collectionViewLayout: flow)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">#available</span>(<span class="keyword">iOS</span> <span class="number">11.0</span>, <span class="operator">*</span>) {</span><br><span class="line">            collectionView.contentInsetAdjustmentBehavior <span class="operator">=</span> .never</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            automaticallyAdjustsScrollViewInsets <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">        }</span><br><span class="line">        collectionView.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.groupTableViewBackground</span><br><span class="line">        <span class="keyword">return</span> collectionView</span><br><span class="line">    }()</span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">var</span> adapter: <span class="type">ListAdapter</span> <span class="operator">=</span> {</span><br><span class="line">        <span class="keyword">let</span> adapter <span class="operator">=</span> <span class="type">ListAdapter</span>(updater: <span class="type">ListAdapterUpdater</span>(), viewController: <span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">return</span> adapter</span><br><span class="line">    }()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> {</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        view.addSubview(collectionView)</span><br><span class="line">        adapter.collectionView <span class="operator">=</span> collectionView</span><br><span class="line">        adapter.dataSource <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLayoutSubviews</span>()</span> {</span><br><span class="line">        <span class="keyword">super</span>.viewDidLayoutSubviews()</span><br><span class="line">        collectionView.frame <span class="operator">=</span> view.bounds</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BaseListVC</span> : <span class="title">ListAdapterDataSource</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">objects</span>(<span class="params">for</span> <span class="params">listAdapter</span>: <span class="type">ListAdapter</span>)</span> -&gt; [<span class="type">ListDiffable</span>] {</span><br><span class="line">        <span class="keyword">return</span> objects</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">listAdapter</span>(<span class="keyword">_</span> <span class="params">listAdapter</span>: <span class="type">ListAdapter</span>, <span class="params">sectionControllerFor</span> <span class="params">object</span>: <span class="keyword">Any</span>)</span> -&gt; <span class="type">ListSectionController</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ListSectionController</span>()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">emptyView</span>(<span class="params">for</span> <span class="params">listAdapter</span>: <span class="type">ListAdapter</span>)</span> -&gt; <span class="type">UIView</span>? {</span><br><span class="line">        <span class="comment">// 无数据时collectionView的展示</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="创建MomentInfo模型">创建<code>MomentInfo</code>模型</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class MomentInfo {</span><br><span class="line">    var id: Int = 0</span><br><span class="line">    ...</span><br><span class="line">}</span><br><span class="line">extension MomentInfo: ListDiffable {</span><br><span class="line">    func diffIdentifier() -&gt; NSObjectProtocol {</span><br><span class="line">        // 区分是否为同一对象，可多属性叠加</span><br><span class="line">        return id as NSObjectProtocol</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    // 判断对象是否相同，不同(false)则刷新</span><br><span class="line">    func isEqual(toDiffableObject object: ListDiffable?) -&gt; Bool {</span><br><span class="line">        guard self === object else { return true }</span><br><span class="line">        guard let object = object as? MomentInfo else { return false }</span><br><span class="line">        return id == object.id</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">extension MomentInfo: Equatable {</span><br><span class="line">    static func == (lhs: MomentInfo, rhs: MomentInfo) -&gt; Bool {</span><br><span class="line">        return lhs.isEqual(toDiffableObject: rhs)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="子类复写">子类复写</h2><ol><li>更新数据</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//info -&gt; MomentInfo的对象</span></span><br><span class="line"><span class="keyword">self</span>.objects.append(info)</span><br><span class="line"><span class="comment">// 数据添加完成后更新</span></span><br><span class="line"><span class="keyword">self</span>.adapter.performUpdates(animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>复写绑定Section</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">override func listAdapter(_ listAdapter: ListAdapter, sectionControllerFor object: Any) -&gt; ListSectionController {</span><br><span class="line">    // 此object的类型就是更新的self.objects的item类型</span><br><span class="line">    switch object {</span><br><span class="line">    case is MomentInfo:</span><br><span class="line">        // MomentBindingSection 继承自 ListBindingSectionController</span><br><span class="line">        let section = MomentBindingSection()</span><br><span class="line">        return section</span><br><span class="line">    default:</span><br><span class="line">        fatalError()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="使用ListBindingSectionController绑定多个cell">使用<code>ListBindingSectionController</code>绑定多个cell</h2><ol><li>创建<code>UICollectionViewCell</code>⚠️<strong>只能有一种样式布局，不同样式需要不同的cell</strong></li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class MomentTopCell: UICollectionViewCell {</span><br><span class="line">    ...</span><br><span class="line">}</span><br><span class="line">extension MomentTopCell: ListBindable {</span><br><span class="line">    func bindViewModel(_ viewModel: Any) {</span><br><span class="line">        guard let viewModel = viewModel as? MomentInfo else { return }</span><br><span class="line">        // 更新cell数据</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>获取cell对象</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func momentTopCell(at index: Int) -&gt; MomentTopCell {</span><br><span class="line">//  guard let cell = collectionContext?.dequeueReusableCell(withNibName: MomentTopCell.jx_className, bundle: nil, for: self, at: index) as? MomentTopCell else { fatalError() }</span><br><span class="line">    guard let cell = collectionContext?.dequeueReusableCell(of: MomentTopCell.self, for: self, at: index) as? MomentTopCell else { fatalError() }</span><br><span class="line">    // 传入cell数据</span><br><span class="line">    cell.bindViewModel(object!)</span><br><span class="line">    return cell</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>绑定视图模型(ViewModel)，可使用枚举替代</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">enum ViewModelEnum: String {</span><br><span class="line">    case top, header, image_single, location, bottom</span><br><span class="line">}</span><br><span class="line">/// 绑定viewmodels，用以区分不同cell</span><br><span class="line">func sectionController(_ sectionController: ListBindingSectionController&lt;ListDiffable&gt;, viewModelsFor object: Any) -&gt; [ListDiffable] {</span><br><span class="line">    guard let object = object as? MomentInfo else { return [] }</span><br><span class="line">    var results: [ListDiffable] = []</span><br><span class="line">    if object.userInfo != nil {</span><br><span class="line">        results.append(ViewModelEnum.top.rawValue as ListDiffable)</span><br><span class="line">    }</span><br><span class="line">    if object.images.count == 1 {</span><br><span class="line">        results.append(ViewModelEnum.image_single.rawValue as ListDiffable)</span><br><span class="line">    }else {</span><br><span class="line">        results.append(ViewModelEnum.header.rawValue as ListDiffable)</span><br><span class="line">    }</span><br><span class="line">    if !object.location.isEmpty {</span><br><span class="line">        results.append(ViewModelEnum.location.rawValue as ListDiffable)</span><br><span class="line">    }</span><br><span class="line">    results.append(ViewModelEnum.bottom.rawValue as ListDiffable)</span><br><span class="line">    return results</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/// 不同viewmodel对应的cell</span><br><span class="line">func sectionController(_ sectionController: ListBindingSectionController&lt;ListDiffable&gt;, cellForViewModel viewModel: Any, at index: Int) -&gt; UICollectionViewCell &amp; ListBindable {</span><br><span class="line">    let viewModel = ViewModelEnum(rawValue: viewModel as! String)!</span><br><span class="line">    switch viewModel {</span><br><span class="line">    case .top:</span><br><span class="line">        return momentTopCell(at: index)</span><br><span class="line">    case .image_single:</span><br><span class="line">        return momentHeaderImageCell(at: index)</span><br><span class="line">    case .header:</span><br><span class="line">        return momentHeaderCell(at: index)</span><br><span class="line">    case .location:</span><br><span class="line">        return momentLocationCell(at: index)</span><br><span class="line">    case .bottom:</span><br><span class="line">        return momentBottomCell(at: index)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">/// 不同cell对应的size</span><br><span class="line">func sectionController(_ sectionController: ListBindingSectionController&lt;ListDiffable&gt;, sizeForViewModel viewModel: Any, at index: Int) -&gt; CGSize {</span><br><span class="line">    guard let object = object as? MomentInfo else { fatalError() }</span><br><span class="line">    let viewModel = ViewModelEnum(rawValue: viewModel as! String)!</span><br><span class="line">    let width: CGFloat = collectionContext!.containerSize(for: self).width</span><br><span class="line">    switch viewModel {</span><br><span class="line">    case .top:</span><br><span class="line">        return CGSize(width: width, height: 400)</span><br><span class="line">    case .header, .image_single:</span><br><span class="line">        return CGSize(width: width, height: object.cellHeight)</span><br><span class="line">    case .location:</span><br><span class="line">        return CGSize(width: width, height: 30)</span><br><span class="line">    case .bottom:</span><br><span class="line">        return CGSize(width: width, height: 30)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂记</title>
      <link href="/2020/04/29/%E6%9D%82%E8%AE%B0/"/>
      <url>/2020/04/29/%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="统计代码量"><a href="http://www.cnblogs.com/kevingrace/p/6768005.html">统计代码量</a></h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">find . -name "*.js" -or -name "*.json" -or -name "*.wxml" -or -name "*.wxss" |xargs cat|grep -r -v ^$|wc -l</span><br><span class="line"></span><br><span class="line">find . -name "*.swift" -or -name "*.xib" |xargs grep -v "^$"|wc -l</span><br><span class="line">find . -name "*.m" -or -name "*.h" -or -name "*.xib" -or -name "*.c" |xargs wc -l</span><br><span class="line">find . "(" -name "*.m" -or -name "*.mm" -or -name "*.cpp" -or -name "*.h" -or -name "*.rss" ")" -print | xargs wc -l</span><br><span class="line"></span><br><span class="line">-name  "*.m" 就表示扩展名为.m的文件。</span><br><span class="line">统计java文件和xml文件的命令分别是：</span><br><span class="line"></span><br><span class="line">find . "(" -name "*.java"  ")" -print | xargs wc -l</span><br><span class="line">find . "(" -name "*.xml"  ")" -print | xargs wc -l</span><br><span class="line"></span><br><span class="line">grep -v "^$"是去掉空行</span><br><span class="line">注释也统计在代码量之内，毕竟也一个字一个字码出来的</span><br></pre></td></tr></tbody></table></figure><h2 id="阿里云服务器搭建git服务器"><a href="https://www.cnblogs.com/dst5650/p/8503772.html">阿里云服务器搭建git服务器</a></h2><h2 id="挖矿机问题">挖矿机问题</h2><ul><li><a href="https://www.freebuf.com/vuls/200289.html">sysupdate 的进程占据了绝大部分的 CPU 资源</a></li></ul><h2 id="外部运行AS模拟器">外部运行AS模拟器</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd Library/Android/sdk/emulator/</span><br><span class="line">emulator -list-avds</span><br><span class="line">emulator -avd Nexus_5X_API_28_x86</span><br></pre></td></tr></tbody></table></figure><ul><li><code>uname -a</code> 查看Linux内核版本命令</li><li><code>lsb_release -a</code> 即可列出所有版本信息</li></ul>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IGListKit使用</title>
      <link href="/2020/04/29/IGListKit%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/04/29/IGListKit%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="创建基类控制器">创建基类控制器</h2><p>所有<code>IGListKit</code>的视图控制器都应该继承此类，减少复用</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseListVC</span>: <span class="title">UIViewController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> objects: [<span class="type">ListDiffable</span>] <span class="operator">=</span> [<span class="type">ListDiffable</span>]()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">var</span> collectionView: <span class="type">UICollectionView</span> <span class="operator">=</span> {</span><br><span class="line">        <span class="keyword">let</span> flow <span class="operator">=</span> <span class="type">UICollectionViewFlowLayout</span>()</span><br><span class="line">        <span class="keyword">let</span> collectionView <span class="operator">=</span> <span class="type">UICollectionView</span>(frame: <span class="type">CGRect</span>.zero, collectionViewLayout: flow)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">#available</span>(<span class="keyword">iOS</span> <span class="number">11.0</span>, <span class="operator">*</span>) {</span><br><span class="line">            collectionView.contentInsetAdjustmentBehavior <span class="operator">=</span> .never</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            automaticallyAdjustsScrollViewInsets <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">        }</span><br><span class="line">        collectionView.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.groupTableViewBackground</span><br><span class="line">        <span class="keyword">return</span> collectionView</span><br><span class="line">    }()</span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">var</span> adapter: <span class="type">ListAdapter</span> <span class="operator">=</span> {</span><br><span class="line">        <span class="keyword">let</span> adapter <span class="operator">=</span> <span class="type">ListAdapter</span>(updater: <span class="type">ListAdapterUpdater</span>(), viewController: <span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">return</span> adapter</span><br><span class="line">    }()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> {</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        view.addSubview(collectionView)</span><br><span class="line">        adapter.collectionView <span class="operator">=</span> collectionView</span><br><span class="line">        adapter.dataSource <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLayoutSubviews</span>()</span> {</span><br><span class="line">        <span class="keyword">super</span>.viewDidLayoutSubviews()</span><br><span class="line">        collectionView.frame <span class="operator">=</span> view.bounds</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BaseListVC</span> : <span class="title">ListAdapterDataSource</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">objects</span>(<span class="params">for</span> <span class="params">listAdapter</span>: <span class="type">ListAdapter</span>)</span> -&gt; [<span class="type">ListDiffable</span>] {</span><br><span class="line">        <span class="keyword">return</span> objects</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">listAdapter</span>(<span class="keyword">_</span> <span class="params">listAdapter</span>: <span class="type">ListAdapter</span>, <span class="params">sectionControllerFor</span> <span class="params">object</span>: <span class="keyword">Any</span>)</span> -&gt; <span class="type">ListSectionController</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ListSectionController</span>()</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">emptyView</span>(<span class="params">for</span> <span class="params">listAdapter</span>: <span class="type">ListAdapter</span>)</span> -&gt; <span class="type">UIView</span>? {</span><br><span class="line">        <span class="comment">// 无数据时collectionView的展示</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="创建MomentInfo模型">创建<code>MomentInfo</code>模型</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class MomentInfo {</span><br><span class="line">    var id: Int = 0</span><br><span class="line">    ...</span><br><span class="line">}</span><br><span class="line">extension MomentInfo: ListDiffable {</span><br><span class="line">    func diffIdentifier() -&gt; NSObjectProtocol {</span><br><span class="line">        // 区分是否为同一对象，可多属性叠加</span><br><span class="line">        return id as NSObjectProtocol</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    // 判断对象是否相同，不同(false)则刷新</span><br><span class="line">    func isEqual(toDiffableObject object: ListDiffable?) -&gt; Bool {</span><br><span class="line">        guard self === object else { return true }</span><br><span class="line">        guard let object = object as? MomentInfo else { return false }</span><br><span class="line">        return id == object.id</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">extension MomentInfo: Equatable {</span><br><span class="line">    static func == (lhs: MomentInfo, rhs: MomentInfo) -&gt; Bool {</span><br><span class="line">        return lhs.isEqual(toDiffableObject: rhs)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="子类复写">子类复写</h2><ol><li>更新数据</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//info -&gt; MomentInfo的对象</span></span><br><span class="line"><span class="keyword">self</span>.objects.append(info)</span><br><span class="line"><span class="comment">// 数据添加完成后更新</span></span><br><span class="line"><span class="keyword">self</span>.adapter.performUpdates(animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>复写绑定Section</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">override func listAdapter(_ listAdapter: ListAdapter, sectionControllerFor object: Any) -&gt; ListSectionController {</span><br><span class="line">    // 此object的类型就是更新的self.objects的item类型</span><br><span class="line">    switch object {</span><br><span class="line">    case is MomentInfo:</span><br><span class="line">        // MomentBindingSection 继承自 ListBindingSectionController</span><br><span class="line">        let section = MomentBindingSection()</span><br><span class="line">        return section</span><br><span class="line">    default:</span><br><span class="line">        fatalError()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="使用ListBindingSectionController绑定多个cell">使用<code>ListBindingSectionController</code>绑定多个cell</h2><ol><li>创建<code>UICollectionViewCell</code>⚠️<strong>只能有一种样式布局，不同样式需要不同的cell</strong></li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class MomentTopCell: UICollectionViewCell {</span><br><span class="line">    ...</span><br><span class="line">}</span><br><span class="line">extension MomentTopCell: ListBindable {</span><br><span class="line">    func bindViewModel(_ viewModel: Any) {</span><br><span class="line">        guard let viewModel = viewModel as? MomentInfo else { return }</span><br><span class="line">        // 更新cell数据</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>获取cell对象</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func momentTopCell(at index: Int) -&gt; MomentTopCell {</span><br><span class="line">//  guard let cell = collectionContext?.dequeueReusableCell(withNibName: MomentTopCell.jx_className, bundle: nil, for: self, at: index) as? MomentTopCell else { fatalError() }</span><br><span class="line">    guard let cell = collectionContext?.dequeueReusableCell(of: MomentTopCell.self, for: self, at: index) as? MomentTopCell else { fatalError() }</span><br><span class="line">    // 传入cell数据</span><br><span class="line">    cell.bindViewModel(object!)</span><br><span class="line">    return cell</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>绑定视图模型(ViewModel)，可使用枚举替代</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">enum ViewModelEnum: String {</span><br><span class="line">    case top, header, image_single, location, bottom</span><br><span class="line">}</span><br><span class="line">/// 绑定viewmodels，用以区分不同cell</span><br><span class="line">func sectionController(_ sectionController: ListBindingSectionController&lt;ListDiffable&gt;, viewModelsFor object: Any) -&gt; [ListDiffable] {</span><br><span class="line">    guard let object = object as? MomentInfo else { return [] }</span><br><span class="line">    var results: [ListDiffable] = []</span><br><span class="line">    if object.userInfo != nil {</span><br><span class="line">        results.append(ViewModelEnum.top.rawValue as ListDiffable)</span><br><span class="line">    }</span><br><span class="line">    if object.images.count == 1 {</span><br><span class="line">        results.append(ViewModelEnum.image_single.rawValue as ListDiffable)</span><br><span class="line">    }else {</span><br><span class="line">        results.append(ViewModelEnum.header.rawValue as ListDiffable)</span><br><span class="line">    }</span><br><span class="line">    if !object.location.isEmpty {</span><br><span class="line">        results.append(ViewModelEnum.location.rawValue as ListDiffable)</span><br><span class="line">    }</span><br><span class="line">    results.append(ViewModelEnum.bottom.rawValue as ListDiffable)</span><br><span class="line">    return results</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/// 不同viewmodel对应的cell</span><br><span class="line">func sectionController(_ sectionController: ListBindingSectionController&lt;ListDiffable&gt;, cellForViewModel viewModel: Any, at index: Int) -&gt; UICollectionViewCell &amp; ListBindable {</span><br><span class="line">    let viewModel = ViewModelEnum(rawValue: viewModel as! String)!</span><br><span class="line">    switch viewModel {</span><br><span class="line">    case .top:</span><br><span class="line">        return momentTopCell(at: index)</span><br><span class="line">    case .image_single:</span><br><span class="line">        return momentHeaderImageCell(at: index)</span><br><span class="line">    case .header:</span><br><span class="line">        return momentHeaderCell(at: index)</span><br><span class="line">    case .location:</span><br><span class="line">        return momentLocationCell(at: index)</span><br><span class="line">    case .bottom:</span><br><span class="line">        return momentBottomCell(at: index)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">/// 不同cell对应的size</span><br><span class="line">func sectionController(_ sectionController: ListBindingSectionController&lt;ListDiffable&gt;, sizeForViewModel viewModel: Any, at index: Int) -&gt; CGSize {</span><br><span class="line">    guard let object = object as? MomentInfo else { fatalError() }</span><br><span class="line">    let viewModel = ViewModelEnum(rawValue: viewModel as! String)!</span><br><span class="line">    let width: CGFloat = collectionContext!.containerSize(for: self).width</span><br><span class="line">    switch viewModel {</span><br><span class="line">    case .top:</span><br><span class="line">        return CGSize(width: width, height: 400)</span><br><span class="line">    case .header, .image_single:</span><br><span class="line">        return CGSize(width: width, height: object.cellHeight)</span><br><span class="line">    case .location:</span><br><span class="line">        return CGSize(width: width, height: 30)</span><br><span class="line">    case .bottom:</span><br><span class="line">        return CGSize(width: width, height: 30)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 笔记</title>
      <link href="/2020/04/29/Flutter%20%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/04/29/Flutter%20%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h2 id="iOS">iOS</h2><h3 id="插件swift-调用oc库">插件swift 调用oc库</h3><ol><li><code>project.podspec</code>文件添加库依赖 <code>s.dependency 'name', 'version'</code></li><li>如需桥接文件<ol><li><code>Pods/Development Pods/project/../ios/Classes/</code>目录下创建桥接文件<code>Flutter-Bridging-Header.h</code>，并引用库头文件</li><li>在<code>project-umbrella.h</code>文件中添加<code>#import "Flutter-Bridging-Header.h"</code>(也可以全局搜索<code>ProjectPlugin.h</code>后添加在其下)⚠️Podfile必须有<code>use_framework!</code>属性才会生成umbrella文件</li></ol></li><li>如需要添加其他资源文件，需要在<code>project.podspec</code>中配置</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">search_paths = [</span><br><span class="line">    '${SDKROOT}/usr/include/libxml2'</span><br><span class="line">]</span><br><span class="line">s.pod_target_xcconfig = {</span><br><span class="line">    'DEFINES_MODULE' =&gt; 'YES',</span><br><span class="line">    'VALID_ARCHS[sdk=iphonesimulator*]' =&gt; 'x86_64',</span><br><span class="line">    'HEADER_SEARCH_PATHS' =&gt; search_paths.join(' '),</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>进入<code>Podfile</code>所在目录<code>pod install</code></li><li>如果调用iOS插件失败，则需要在<code>Info.plist</code>中添加以下代码</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;key&gt;io.flutter.embedded_views_preview&lt;/key&gt;</span><br><span class="line">&lt;true/&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="Android">Android</h2><h3 id="密钥-adb">密钥 &amp; adb</h3><ul><li>获取jks应用签名 <code>keytool -list -v -keystore yourkeystore</code>，选取对应别名的<code>MD5</code>: <code>MD5.split(":").join("")</code></li><li><code>adb devices</code>查看连接设备；<code>adb -s serial</code>指定设备连接；<code>adb -s serial shell</code>连接指定设备shell</li></ul><h2 id="Flutter">Flutter</h2><h3 id="自动方向监听">自动方向监听</h3><ol><li>添加每一帧回调方法</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void addPersistentFrameCallback(VoidCallback cb) {</span><br><span class="line">  final widgetsBinding = WidgetsBinding.instance;</span><br><span class="line">  widgetsBinding.addPostFrameCallback((callback) {</span><br><span class="line">    widgetsBinding.addPersistentFrameCallback((callback) {</span><br><span class="line">      if (cb != null) cb();</span><br><span class="line">      //触发一帧的绘制</span><br><span class="line">      widgetsBinding.scheduleFrame();</span><br><span class="line">    });</span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>在<code>initState</code>方法中初始化监听</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">addPersistentFrameCallback(() {</span><br><span class="line">  var orientation = MediaQuery.of(videoContext).orientation;</span><br><span class="line">  bool _fullscreen;</span><br><span class="line">  if (orientation == Orientation.landscape) {</span><br><span class="line">    //横屏</span><br><span class="line">    _fullscreen = true;</span><br><span class="line">    SystemChrome.setEnabledSystemUIOverlays([]);</span><br><span class="line">  } else if (orientation == Orientation.portrait) {</span><br><span class="line">    _fullscreen = false;</span><br><span class="line">    SystemChrome.setEnabledSystemUIOverlays(SystemUiOverlay.values);</span><br><span class="line">  }</span><br><span class="line">  if (_fullscreen != fullscreened) {</span><br><span class="line">    setState(() {</span><br><span class="line">      fullscreened = !fullscreened;</span><br><span class="line">      //触发全屏事件</span><br><span class="line">      if (widget.onfullscreen != null) {</span><br><span class="line">        widget.onfullscreen(fullscreened);</span><br><span class="line">      }</span><br><span class="line">    });</span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h3 id="拦截物理返回按键">拦截物理返回按键</h3><ol><li>WillPopScope，会拦截右滑</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int last = 0;</span><br><span class="line">Future&lt;bool&gt; doubleClickBack() {</span><br><span class="line">  int now = DateTime.now().millisecond;</span><br><span class="line">  if (now - last &gt; 800) {</span><br><span class="line">    last = DateTime.now().millisecond;</span><br><span class="line">    return Future.value(false);</span><br><span class="line">  } else {</span><br><span class="line">    return Future.value(true);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">WillPopScope(</span><br><span class="line">  onWillPop: doubleClickBack,</span><br><span class="line">  child: Widget</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>弹出一个本地路由防止物理按键直接返回</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void _navigateLocally(context) async {</span><br><span class="line">  if (!fullscreened) {</span><br><span class="line">    if (ModalRoute.of(context).willHandlePopInternally) {</span><br><span class="line">      Navigator.of(context).pop();</span><br><span class="line">    }</span><br><span class="line">    return;</span><br><span class="line">  }</span><br><span class="line">  ModalRoute.of(context).addLocalHistoryEntry(LocalHistoryEntry(onRemove: () {</span><br><span class="line">    if (fullscreened) toggleFullScreen();</span><br><span class="line">  }));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="问题">问题</h2><h3 id="升级Xcode11-4导致Flutter项目报错Building-for-iOS-but-the-linked-and-embedded-framework-App-framework’的处理">升级Xcode11.4导致Flutter项目报错Building for iOS, but the linked and embedded framework 'App.framework’的处理</h3><ol><li>进入项目根目录</li><li>flutter clean</li><li>rm -rf ios/Flutter/App.framework</li></ol>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
          <category> 跨平台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
