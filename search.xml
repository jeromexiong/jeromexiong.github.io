<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>App Groups 应用间通信</title>
      <link href="/2021/11/25/App%20Groups%20%E5%BA%94%E7%94%A8%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
      <url>/2021/11/25/App%20Groups%20%E5%BA%94%E7%94%A8%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在实际的开发中，我们也许会有这种需求：<br>公司的旗下有两个App，当客户已经登录一个App A的情况下，再登录另一个App B时，B不再需要繁琐的登录过程就可以直接使用A已经登录的信息。但是iOS系统下有这么一个安全机制：每个应用都有自己对应的沙盒，每个沙盒之间都是相互独立的，互不能访问（没有越狱的情况下）。<br>这种情况，我们应该怎么处理呢？</p></blockquote><h2 id="一、认识App-Groups">一、认识App Groups</h2><blockquote><p>AppGroup allows data sharing between two different apps or even app and widgets by creating one common shared path (like document directory). Data saved over there can be accessed by any app which is associated with that particular AppGroup. It is an offline data sharing between apps.</p></blockquote><p>这是一段关于App groups的一段说明，告诉我们了App Groups可以使两个不同的APP进行数据共享，看起来这个是解决我们刚才那个问题的好方法。那就让我们开启我们的数据共享之旅吧！</p><h2 id="二、App-Groups-使用（推荐）">二、App Groups 使用（推荐）</h2><blockquote><p>否则需要去控制台手动添加</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/image-20211125163024605.png" alt="image-20211125163024605"></p><ol><li>添加应用组：<code>target</code> -&gt; <code>Signing &amp; Capabilities</code> -&gt; <code>+Capability</code> -&gt; <code>App Groups</code></li><li>如果不存在应用组，直接左下角添加；（若应用组为红色的，需要刷新同步创建应用组到控制台<a href="https://developer.apple.com/account/resources/identifiers/list">Apple Developer</a></li><li>如果存在直接添加即可（若groups只显示debug，也许需要分开添加合并</li></ol><p>到这一步我们就可以愉快的开始应用间交互了～</p><h3 id="轻量级的数据共享-使用UserDefaults">轻量级的数据共享 使用UserDefaults</h3><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置</span></span><br><span class="line"><span class="keyword">let</span> groupDefault <span class="operator">=</span> <span class="type">UserDefaults</span>(suiteName: <span class="string">"自定义的App Group Id"</span>)</span><br><span class="line">groupDefault<span class="operator">?</span>.set(<span class="string">"测试结果"</span>, forKey: <span class="string">"groupKey"</span>)</span><br><span class="line">groupDefault<span class="operator">?</span>.synchronize()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">let</span> groupDefault <span class="operator">=</span> <span class="type">UserDefaults</span>(suiteName: <span class="string">"自定义的App Group Id"</span>)</span><br><span class="line">groupDefault<span class="operator">?</span>.value(forKey: <span class="string">"groupKey"</span>)</span><br></pre></td></tr></tbody></table></figure><p>示例：</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置</span></span><br><span class="line"><span class="keyword">let</span> groupDefault <span class="operator">=</span> <span class="type">UserDefaults</span>(suiteName: <span class="string">"group.io.agora.api.example.kilomind"</span>)</span><br><span class="line">groupDefault<span class="operator">?</span>.set(channelName, forKey: <span class="string">"channelName"</span>)</span><br><span class="line">groupDefault<span class="operator">?</span>.synchronize()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">let</span> groupDefault <span class="operator">=</span> <span class="type">UserDefaults</span>(suiteName: <span class="string">"group.io.agora.api.example.kilomind"</span>)</span><br><span class="line"><span class="keyword">let</span> channel <span class="operator">=</span> groupDefault<span class="operator">?</span>.value(forKey: <span class="string">"channelName"</span>) <span class="keyword">as?</span> <span class="type">String</span></span><br></pre></td></tr></tbody></table></figure><h3 id="大量数据的共享，使用FileManager">大量数据的共享，使用FileManager</h3><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置</span></span><br><span class="line"><span class="keyword">let</span> containerURL <span class="operator">=</span> <span class="type">FileManager</span>.default.containerURL(forSecurityApplicationGroupIdentifier: <span class="string">"自定义的App Group Id"</span>)</span><br><span class="line"><span class="keyword">let</span> logsPath <span class="operator">=</span> containerURL<span class="operator">!</span>.appendingPathComponent(<span class="string">"ShareGroup"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">let</span> documentsDirectory <span class="operator">=</span> <span class="type">FileManager</span>.default.containerURL(forSecurityApplicationGroupIdentifier: <span class="string">"自定义的App Group Id"</span>)</span><br><span class="line"><span class="keyword">let</span> replayPath <span class="operator">=</span> documentsDirectory<span class="operator">?</span>.appendingPathComponent(<span class="string">"/ShareGroup"</span>)</span><br><span class="line"><span class="keyword">let</span> directoryContents <span class="operator">=</span> <span class="keyword">try!</span> <span class="type">FileManager</span>.default.contentsOfDirectory(at: replayPath<span class="operator">!</span>, includingPropertiesForKeys: <span class="literal">nil</span>, options: [])</span><br></pre></td></tr></tbody></table></figure><p>示例：</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置</span></span><br><span class="line"><span class="keyword">let</span> groupUrl <span class="operator">=</span> <span class="type">FileManager</span>.default.containerURL(forSecurityApplicationGroupIdentifier: <span class="string">"group.io.agora.api.example.kilomind"</span>)<span class="operator">!</span>.appendingPathComponent(<span class="string">"Library/Preferences"</span>)</span><br><span class="line"><span class="keyword">let</span> fileUrl <span class="operator">=</span> groupUrl.appendingPathComponent(<span class="string">"appGroup.txt"</span>)</span><br><span class="line"><span class="keyword">try!</span> channelName.write(to: fileUrl, atomically: <span class="literal">true</span>, encoding: .utf8)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">let</span> groupUrl <span class="operator">=</span> <span class="type">FileManager</span>.default.containerURL(forSecurityApplicationGroupIdentifier: <span class="string">"group.io.agora.api.example.kilomind"</span>)<span class="operator">!</span>.appendingPathComponent(<span class="string">"Library/Preferences"</span>)</span><br><span class="line"><span class="keyword">let</span> fileUrl <span class="operator">=</span> groupUrl.appendingPathComponent(<span class="string">"appGroup.txt"</span>)</span><br><span class="line"><span class="keyword">let</span> text <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">String</span>(contentsOf: fileUrl, encoding: .utf8)</span><br></pre></td></tr></tbody></table></figure><h2 id="App-Group在系统录屏的具体使用">App Group在系统录屏的具体使用</h2><h3 id="添加扩展">添加扩展</h3><p>在<code>target</code>左下角添加，<code>iOS</code> -&gt; <code>Broadcast Upload Extension</code>，bundleid设置为<code>main bundleid.ScreenShare-Extension</code></p><h3 id="使用">使用</h3><p>添加扩展后会在项目目录生成<code>extension target</code>，在该目录下 有入口文件<code>SampleHandler</code></p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> ReplayKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleHandler</span>: <span class="title">RPBroadcastSampleHandler</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">broadcastStarted</span>(<span class="params">withSetupInfo</span> <span class="params">setupInfo</span>: [<span class="params">String</span> : <span class="type">NSObject</span>]<span class="operator">?</span>)</span> {</span><br><span class="line">        <span class="keyword">let</span> groupDefault <span class="operator">=</span> <span class="type">UserDefaults</span>(suiteName: <span class="string">"group.io.agora.api.example.kilomind"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> channel <span class="operator">=</span> groupDefault<span class="operator">?</span>.value(forKey: <span class="string">"channelName"</span>) <span class="keyword">as?</span> <span class="type">String</span> {</span><br><span class="line">            <span class="comment">// share channel</span></span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// default</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">broadcastPaused</span>()</span> {</span><br><span class="line">        <span class="comment">// User has requested to pause the broadcast. Samples will stop being delivered.</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">broadcastResumed</span>()</span> {</span><br><span class="line">        <span class="comment">// User has requested to resume the broadcast. Samples delivery will resume.</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">broadcastFinished</span>()</span> {</span><br><span class="line">        <span class="comment">// finished</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">processSampleBuffer</span>(<span class="keyword">_</span> <span class="params">sampleBuffer</span>: <span class="type">CMSampleBuffer</span>, <span class="params">with</span> <span class="params">sampleBufferType</span>: <span class="type">RPSampleBufferType</span>)</span> {</span><br><span class="line">        <span class="comment">// send buffer</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="启动录制">启动录制</h3><ol><li>获取系统录制按钮，点击即可弹出屏幕共享选择</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ReplayKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> screenSharePicker <span class="operator">=</span> <span class="type">UIView</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prepareBroadcaster</span>()</span> {</span><br><span class="line">    view.addSubview(screenSharePicker)</span><br><span class="line">    <span class="comment">// screenSharePicker.frame = CGRect(x: 0, y:200, width: 60, height: 60)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">#available</span>(<span class="keyword">iOS</span> <span class="number">12.0</span>, <span class="operator">*</span>) {</span><br><span class="line">        <span class="keyword">let</span> picker <span class="operator">=</span> <span class="type">RPSystemBroadcastPickerView</span>(frame: .zero)</span><br><span class="line">        picker.frame <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="number">0</span>, y:<span class="number">0</span>, width: <span class="number">60</span>, height: <span class="number">60</span>)</span><br><span class="line">        picker.autoresizingMask <span class="operator">=</span> [.flexibleTopMargin, .flexibleRightMargin]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">Bundle</span>.main.url(forResource: <span class="string">"Agora-ScreenShare-Extension"</span>, withExtension: <span class="string">"appex"</span>, subdirectory: <span class="string">"PlugIns"</span>) {</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> bundle <span class="operator">=</span> <span class="type">Bundle</span>(url: url) {</span><br><span class="line">                picker.preferredExtension <span class="operator">=</span> bundle.bundleIdentifier</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        screenSharePicker.addSubview(picker)</span><br><span class="line">    }<span class="keyword">else</span> {</span><br><span class="line">      <span class="comment">// Minimum support iOS version is 12.0</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>自定义UI方式触发弹出</li></ol><p>方法一中的代码隐藏视图<code>screenSharePicker.isHidden = true</code>；自定义按钮事件触发屏幕共享。</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">click</span>(<span class="keyword">_</span> <span class="params">btn</span>: <span class="type">UIButton</span>)</span> {</span><br><span class="line">    <span class="keyword">for</span> subview <span class="keyword">in</span> screenSharePicker.subviews[<span class="number">0</span>].subviews {</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> btn <span class="operator">=</span> subview <span class="keyword">as?</span> <span class="type">UIButton</span> {</span><br><span class="line">            btn.sendActions(for: .allTouchEvents)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="结束录制">结束录制</h3><ol><li>正常情况下结束会弹出一个错误结束框：</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.finishBroadcastWithError(<span class="type">NSError</span>(domain: <span class="type">NSStringFromClass</span>(<span class="type">SampleHandler</span>.<span class="keyword">self</span>), code: <span class="number">0</span>, userInfo: [NSLocalizedFailureReasonErrorKey: <span class="string">"屏幕共享已结束"</span>]) <span class="keyword">as</span> <span class="type">Error</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二，直接使用全局方法结束</span></span><br><span class="line">finishBroadcastGracefully(<span class="keyword">self</span>)</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>新建OC扩展文件<code>BroadcastUploadHelpers</code>，处理不弹框直接结束屏幕录制。参考<a href="https://github.com/TelegramMessenger/Telegram-iOS/search?q=finishBroadcastGracefully">Telegram</a></li></ol><figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BroadcastUploadHelpers_h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BroadcastUploadHelpers_h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;ReplayKit/ReplayKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> finishBroadcastGracefully(RPBroadcastSampleHandler * _Nonnull broadcastSampleHandler);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* BroadcastUploadHelpers_h */</span></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"BroadcastUploadHelpers.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> finishBroadcastGracefully(RPBroadcastSampleHandler * _Nonnull broadcastSampleHandler) {</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic push</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic ignored <span class="meta-string">"-Wnonnull"</span></span></span><br><span class="line">    [broadcastSampleHandler finishBroadcastWithError:<span class="literal">nil</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic pop</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS数据持久化方式</title>
      <link href="/2021/10/15/iOS%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8F/"/>
      <url>/2021/10/15/iOS%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1>一、iOS数据持久化方式</h1><ul><li>XML属性列表（plist）归档</li><li>Preference(偏好设置)，本质还是通过“plist”来存储数据, 但是使用更简单(无需关注文件、文件夹路径和名称)</li><li>NSKeyedArchiver归档(NSCoding)，可以把任何对象, 直接保存为文件的方式。</li><li>SQLite3，当非常大量的数据存储时使用</li><li>Core Data，就是对SQLite的封装</li></ul><blockquote><p>关于bundle路径和sandbox沙河路径：<br>（1）bundle路径：应用程序 (APP) 在手机里面的安装路径<br>（2）沙河路径：专门用来存储App自己数据的一个路径，iOS为每个app都分配了一个专门用来存储这个app自身的一些数据的路径</p></blockquote><hr><h1>二、应用沙盒(应用程序的文件夹)</h1><ol><li>打印沙盒路径</li></ol><figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,<span class="built_in">NSHomeDirectory</span>());</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>使用Documents目录进行数据持久化的保存，我们平时操作数据主要使用Documents目录</li></ol><div class="tabs" id="code"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#code-1">Swift</button></li><li class="tab"><button type="button" data-href="#code-2">objc</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="code-1"><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">let</span> path <span class="operator">=</span> <span class="type">NSSearchPathForDirectoriesInDomains</span>(.documentDirectory, .userDomainMask, <span class="literal">true</span>)[<span class="number">0</span>] <span class="operator">+</span> <span class="string">"/test.plist"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">let</span> url <span class="operator">=</span> <span class="type">FileManager</span>.default.urls(for: .documentDirectory, in: .userDomainMask)[<span class="number">0</span>].appendingPathComponent(<span class="string">"test.plist"</span>)</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="code-2"><figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *path = [[<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastObject] stringByAppendingPathComponent:<span class="string">@"test.plist"</span>];</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><ul><li>参数1：第一个参数指定了搜索的路径名称，NSDocumentDirectory表示是在Documents中寻找，NSCachesDirectory的话就是在cache文件夹中寻找<br>常用枚举：<br>NSDocumentDirectory<br>NSCachesDirectory</li></ul></blockquote><ul><li>参数2：<br>NSUserDomainMask = 1,//用户主目录中<br>NSLocalDomainMask = 2,//当前机器中<br>NSNetworkDomainMask = 4,//网络中可见的主机<br>NSSystemDomainMask = 8,//系统目录,不可修改(/System)<br>NSAllDomainsMask = 0x0ffff,//全部</li><li>参数3：是否展开波浪线，一般为YES展开</li></ul><h5 id="Documents：">Documents：</h5><p>需要保存由应用程序本身产生的文件或者数据，例如：游戏进度、涂鸦软件的绘图<br>目录中的文件会被自动保存在 iCloud<br>注意：不要保存从网络上下载的文件，否则会无法上架！</p><h5 id="tmp：">tmp：</h5><p>保存临时文件，后续不需要使用<br>tmp目录中的文件，系统会自动清理<br>重新启动手机，tmp 目录会被清空<br>系统磁盘空间不足时，系统也会自动清理<br>路径获取：<code>NSString *tmp = NSTemporaryDirectory();</code></p><h5 id="Library-Caches：">Library/Caches：</h5><p>保存临时文件，后续需要使用，例如：缓存图片，离线数据(地图数据)<br>系统不会清理cache目录中的文件<br>就要求程序开发时，必须提供cache目录的清理解决方案<br>路径获取：利用<code>NSSearchPathForDirectoriesInDomains</code>函数(将函数的第2个参数改为：<code>NSCachesDirectory</code>即可)</p><h5 id="Library-Preference：">Library/Preference：</h5><p>保存应用的所有偏好设置，使用 NSUserDefault直接读写，iOS的Settings(设置)应用会在该目录中查找应用的设置信息。iTunes同步设备时会备份该目录。该目录由系统管理, 无需我们来管理。通常用来存储一些基本的软件配置信息, 比如记住密码、自动登录等。<br>路径获取： 通过NSUserDefaults类存取该目录下的设置信息</p><hr><h1>三、使用方法</h1><h3 id="1、属性列表">1、属性列表</h3><ul><li>属性列表是一种XML格式的文件，拓展名为plist，如果对象是NSString、NSDictionary、NSArray、NSData、NSNumber等类型，就可以使用，</li><li>注意：不能存储自定义对象，会失败的</li><li>存方法：writeToFile</li><li>读方法：如字典， dictionaryWithContentsOfFile</li></ul><h3 id="2、偏好设置">2、偏好设置</h3><ul><li>通过NSUserDefaults就能直接访问软件的偏好设置(Library/Preferences)<br>UserDefaults设置数据时，不是立即写入，而是根据时间戳定时地把缓存中的数据写入本地磁盘。所以调用了set方法之后数据有可能还没有写入磁盘应用程序就终止了，为解决上述问题，通过调用synchornize方法强制写入。</li><li>写入步骤：<br>（1） 获取偏好设置对象</li></ul><div class="tabs" id="code"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#code-1">Swift</button></li><li class="tab"><button type="button" data-href="#code-2">objc</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="code-1"><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userDefault <span class="operator">=</span> <span class="type">UserDefaults</span>.standard</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="code-2"><figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSUserDefaults</span> *userDefault = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</span><br></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>（2）写入</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userDefault.setValue(switcher.isOn, forKey: <span class="string">"key_name"</span>)</span><br><span class="line"><span class="comment">// [userDefault setBool:switcher.isOn forKey:@"key_name"];</span></span><br></pre></td></tr></tbody></table></figure><p>（3）同步</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userDefault.synchronize()</span><br><span class="line"><span class="comment">// [userDefault synchronize];</span></span><br></pre></td></tr></tbody></table></figure><ul><li>读取步骤：<br>（1） 获取偏好设置对象</li></ul><figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSUserDefaults</span> *userDefault = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</span><br></pre></td></tr></tbody></table></figure><p>（2）用一个变量接收</p><figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">switcher.on = [userDefault boolForKey:<span class="string">@"key_name"</span>];</span><br></pre></td></tr></tbody></table></figure><h3 id="3、自定义对象归档-NSKeyedArchiver">3、自定义对象归档 NSKeyedArchiver</h3><blockquote><p>注意： 必须遵守NSCoding协议的对象才可以进行归档解档，默NSString、NSDictionary、NSArray、NSData、NSNumber等类型已遵守NSCoding协议，可以直接归档解档。</p></blockquote><h6 id="（1）遵守NSCoding协议，实现协议方法">（1）遵守NSCoding协议，实现协议方法</h6><p>NSCoding协议中两个方法，一般写在模型中：</p><ul><li>归档调用<br>一般在这个方法里面指定如何归档对象中的每个实例变量，可以使用encodeObject:forKey:方法归档实例变量</li></ul><figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)encodeWithCoder:(<span class="built_in">NSCoder</span> *)aCoder;</span><br><span class="line">[encoder encodeObject:<span class="keyword">self</span>.name forKey:<span class="string">@"name"</span>];</span><br></pre></td></tr></tbody></table></figure><ul><li>解档调用<br>一般在这个方法里面指定如何解码文件中的数据为对象的实例变量，可以使用decodeObject:forKey方法解码实例变量</li></ul><figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder;</span><br><span class="line"><span class="keyword">self</span>.name = [decoder decodeObjectForKey:<span class="string">@"name"</span>];</span><br></pre></td></tr></tbody></table></figure><blockquote><p>initWithCoder原理:只要解析文件就会调用，xib,storyboard都是文件，因此只要解析这两个文件，就会调用initWithCoder，因此如果在storyboard使用自定义view,重写initWithCoder方法，一定要调用[super initWithCoder:]，因为只有系统才知道怎么解析storyboard，如果没有调用，就解析不了这个文件。</p></blockquote><h6 id="（2）归档一个对象（先获取路径path）">（2）归档一个对象（先获取路径path）</h6><figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person *person = [[[Person alloc] init];</span><br><span class="line">[<span class="built_in">NSKeyedArchiver</span> archiveRootObject:person toFile:path];</span><br></pre></td></tr></tbody></table></figure><h6 id="（3）解档一个对象">（3）解档一个对象</h6><figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person *person = [<span class="built_in">NSKeyedUnarchiver</span> unarchiveObjectWithFile:path];</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意：<br>（1）如果父类也遵守了NSCoding协议，应该在encodeWithCoder:方法中加上一句[super encodeWithCode:encode];确保继承的实例变量也能被编码，即也能被归档<br>（2）在initWithCoder:方法中加上一句self = [super initWithCoder:decoder];确保继承的实例变量也能被解码，即也能被恢复</p></blockquote><h3 id="4、多个对象归档解档">4、多个对象归档解档</h3><p>使用archiveRootObject:toFile:方法可以将一个对象直接写入到一个文件中，但有时候可能想将多个对象写入到同一个文件中，那么就要使用NSData来进行归档对象，NSData可以为一些数据提供临时存储空间，以便随后写入文件，或者存放从磁盘读取的文件内容。可以使用[NSMutableData data]创建可变数据空间<br>（1） 归档步骤</p><figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一块可变数据区</span></span><br><span class="line"><span class="built_in">NSMutableData</span> *data = [<span class="built_in">NSMutableData</span> data];</span><br><span class="line"><span class="comment">// 将数据区连接到一个NSKeyedArchiver对象</span></span><br><span class="line"><span class="built_in">NSKeyedArchiver</span> *archiver = [[<span class="built_in">NSKeyedArchiver</span> alloc] initForWritingWithMutableData:data];</span><br><span class="line"><span class="comment">// 开始存档对象，存档的数据都会存储到NSMutableData中</span></span><br><span class="line">[archiver encodeObject:person1 forKey:<span class="string">@"person1"</span>];</span><br><span class="line">[archiver encodeObject:person2 forKey:<span class="string">@"person2"</span>];</span><br><span class="line"><span class="comment">// 存档完毕(一定要调用这个方法)</span></span><br><span class="line">[archiver finishEncoding];</span><br><span class="line"><span class="comment">// 将存档的数据写入文件</span></span><br><span class="line">[data writeToFile:path atomically:<span class="literal">YES</span>];</span><br></pre></td></tr></tbody></table></figure><p>（2） 解档步骤</p><figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从文件中读取数据</span></span><br><span class="line"><span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfFile:path];</span><br><span class="line"><span class="comment">// 根据数据，解析成一个NSKeyedUnarchiver对象</span></span><br><span class="line"><span class="built_in">NSKeyedUnarchiver</span> *unarchiver = [[<span class="built_in">NSKeyedUnarchiver</span> alloc] initForReadingWithData:data];</span><br><span class="line">Person *person1 = [unarchiver decodeObjectForKey:<span class="string">@"person1"</span>];</span><br><span class="line">Person *person2 = [unarchiver decodeObjectForKey:<span class="string">@"person2"</span>];</span><br><span class="line"><span class="comment">// 恢复完毕</span></span><br><span class="line">[unarchiver finishDecoding];</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> objc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode常见问题</title>
      <link href="/2021/10/14/Xcode%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2021/10/14/Xcode%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="Optimization-Opportunities-The-layer-is-using-dynamic-shadows-which-are-expensive-to-render-If-possible-try-setting-shadowPath-or-pre-rendering-the-shadow-into-an-image-and-putting-it-under-the-layer">Optimization Opportunities: The layer is using dynamic shadows which are expensive to render. If possible try setting shadowPath, or pre-rendering the shadow into an image and putting it under the layer.</h3><blockquote><p>这是因为没有设置shadowPath导致了离屏渲染<br>解决方法有两种：</p></blockquote><ol><li>通过明确地设置shadowPath来“引导”阴影渲染，例如</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.layer.shadowPath <span class="operator">=</span> <span class="type">UIBezierPath</span>(rect: view.bounds).cgPath</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>缓存<code>rasterization</code>(珊格化)</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">view.layer.shouldRasterize <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">view.layer.rasterizationScale <span class="operator">=</span> <span class="type">UIScreen</span>.main.scale</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> Xcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 唤起APP之Universal Link(通用链接)</title>
      <link href="/2021/10/13/iOS%20%E5%94%A4%E8%B5%B7APP%E4%B9%8BUniversal%20Link(%E9%80%9A%E7%94%A8%E9%93%BE%E6%8E%A5)/"/>
      <url>/2021/10/13/iOS%20%E5%94%A4%E8%B5%B7APP%E4%B9%8BUniversal%20Link(%E9%80%9A%E7%94%A8%E9%93%BE%E6%8E%A5)/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是Universal-Link-通用链接">什么是<code>Universal Link</code>(通用链接)</h4><p><code>Universal Link</code>(通用链接)是Apple在iOS9推出的一种能够方便的通过传统<code>HTTPS</code>链接来启动APP的功能，可以使用相同的网址打开网址和APP。当你的应用支持<code>Universal Link</code>(通用链接)，当用户点击一个链接是可以跳转到你的网站并获得无缝重定向到对应的APP，且不需要通过<code>Safari</code>浏览器。如果你的应用不支持的话，则会在<code>Safari</code>中打开该链接。在苹果开发者中可以看到对它的介绍是：</p><blockquote><p>Seamlessly link to content inside your app, or on your website in iOS 9 or later. With universal links, you can always give users the most integrated mobile experience, even when your app isn’t installed on their device.</p></blockquote><h4 id="如何理解Universal-Link-通用链接">如何理解<code>Universal Link</code>(通用链接)</h4><p><code>Universal Link</code>(通用链接)：看起来就是一条普通的<code>https</code>链接，当然是我们在该链接域名根目录配置过的一个链接，也可以在该链接中放置对应的H5页面。当用户的点击该链接，只要手机中安装了支持该链接的APP就会直接进入到APP中。如果没有安装APP则会跳转到<code>Safari</code>浏览器中，展示H5页面。对用户来说则是一个无缝跳转的过程。</p><h4 id="Universal-Link-通用链接-的应用场景"><code>Universal Link</code>(通用链接)的应用场景</h4><p>使用<code>Universal Link</code>(通用链接)可以让用户在<code>Safari</code>浏览器或者其他APP的<code>webview</code>中拉起相应的APP，也可以在APP中使用相应的功能，从而来把用户引流到APP中。比如淘宝当在<code>Safari</code>浏览器中进入淘宝网页点击打开APP则会使用<code>Universal Link</code>(通用链接)来拉起淘宝APP。</p><h4 id="使用Universal-Link-通用链接-跳转的好处">使用<code>Universal Link</code>(通用链接)跳转的好处</h4><ul><li><strong>唯一性</strong>: 不像自定义的<code>URL Scheme</code>，因为它使用标准的<code>HTTPS</code>协议链接到你的web站点，所以一般不会被其它的APP所声明。另外，<code>URL scheme</code>因为是自定义的协议，所以在没有安装 app 的情况下是无法直接打开的(在<code>Safari</code>中还会出现一个不可打开的弹窗)，而<code>Universal Link</code>(通用链接)本身是一个<code>HTTPS</code>链接，所以有更好的兼容性；</li><li><strong>安全</strong>:当用户的手机上安装了你的APP，那么系统会去你配置的网站上去下载你上传上去的说明文件(这个说明文件声明了当前该<code>HTTPS</code>链接可以打开那些APP)。因为只有你自己才能上传文件到你网站的根目录，所以你的网站和你的APP之间的关联是安全的；</li><li><strong>可变</strong>:当用户手机上没有安装你的APP的时候，<code>Universal Link</code>(通用链接)也能够工作。如果你愿意，在没有安装你的app的时候，用户点击链接，会在safari中展示你网站的内容；</li><li><strong>简单</strong>:一个<code>HTTPS</code>的链接，可以同时作用于网站和APP；</li><li><strong>私有</strong>: 其它APP可以在不需要知道你的APP是否安装了的情况下和你的APP相互通信。</li></ul><h4 id="支持Universal-Link-通用链接">支持<code>Universal Link</code>(通用链接)</h4><ol><li><p>先决条件:必须有一个支持<code>HTTPS</code>的域名，并且拥有该域名下的上传到根目录的权限（为了上传Apple指定文件）。</p></li><li><p>开发者中心配置：找到对应的App ID，在Application Services列表里有Associated Domains一条，把它变为Enabled就可以了。</p><p>配置App ID支持Associated Domains:</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/webp" alt="img"></p><ol start="3"><li>工程配置：</li></ol><ul><li><strong>Xcode 11.0版本</strong><br>工程配置中相应功能：targets-&gt;Signing&amp;Capabilites-&gt;Capability-&gt;Associated Domains，在其中的Domains中填入你想支持的域名，也必须必须以applinks:为前缀。<br>具体步骤如下图:</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/webp-20211013171513005" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/webp-20211013171528844" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/webp-20211013171552313" alt="img"></p><ul><li>Xcode 11.0以下版本<br>工程配置中相应功能：targets-&gt;Capabilites-&gt;Associated Domains，在其中的Domains中填入你想支持的域名，必须以applinks:为前缀。<br>配置项目中的Associated Domains:</li></ul><p><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/webp-20211013171638966" alt="img"></p><ol start="4"><li>配置指定文件：创建一个内容为json格式的文件，苹果将会在合适的时候，从我们在项目中填入的域名请求这个文件。这个文件名必须为apple-app-site-association，<strong>切记没有后缀名</strong>，文件内容大概是这样子：</li></ol><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"applinks"</span>: {</span><br><span class="line">        <span class="attr">"apps"</span>: [],</span><br><span class="line">        <span class="attr">"details"</span>: [</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">"appID"</span>: <span class="string">"9JA89QQLNQ.com.apple.wwdc"</span>,</span><br><span class="line">                <span class="attr">"paths"</span>: [ <span class="string">"/wwdc/news/"</span>, <span class="string">"/videos/wwdc/2015/*"</span>]</span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">"appID"</span>: <span class="string">"ABCD1234.com.apple.wwdc"</span>,</span><br><span class="line">                <span class="attr">"paths"</span>: [ <span class="string">"*"</span> ]</span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>说明：</p><blockquote><p>appID：组成方式是 <code>teamId.yourapp’s bundle identifier</code>。如上面的 9JA89QQLNQ就是teamId。登陆开发者中心，在Account -&gt; Membership里面可以找到Team ID。</p></blockquote><blockquote><p>paths：设定你的app支持的路径列表，只有这些指定的路径的链接，才能被app所处理。星号的写法代表了可识 别域名下所有链接。</p></blockquote><ol start="5"><li>上传指定文件:上传该文件到你的域名所对应的<code>根目录</code>或者<code>.well-known目录</code>（⚠️iOS 10 以后需要放在该目录下才生效）下，这是为了苹果能获取到你上传的文件。上传完后,自己先访问一下,看看是否能够获取到，当你在浏览器中输入这个文件链接后，应该是直接下载apple-app-site-association文件。</li></ol><h4 id="Universal-Link-通用链接-相关验证"><code>Universal Link</code>(通用链接)相关验证</h4><p>在iOS设备中的备忘录中输入APP能识别的链接，然后直接点击此链接，就会直接跳转到你的app了。或是长按，在出现的弹出菜单中第二项是在’XXX’中打开，这也代表着成功：</p><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/webp-20211013173320186" alt="img" style="zoom:33%;"><p>或是你将要测试的网址在<code>Safari</code>中打开，在出现的网页上方下滑，可以看到有在”XX”应用中打开：</p><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/webp-20211013173329786" alt="img" style="zoom: 33%;"><p>当点击某个链接，直接可以进我们的app了，但是我们的目的是要能够获取到用户进来的链接，根据链接来展示给用户相应的内容。<br>我们需要在工程里的实现<code>AppDelegate</code>里对应的方法：</p><figure class="highlight objc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application continueUserActivity:(<span class="built_in">NSUserActivity</span> *)userActivity restorationHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSArray</span> * _Nullable))restorationHandler {</span><br><span class="line">    <span class="keyword">if</span> ([userActivity.activityType isEqualToString:<span class="built_in">NSUserActivityTypeBrowsingWeb</span>])</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">NSURL</span> *webpageURL = userActivity.webpageURL;</span><br><span class="line">        <span class="keyword">if</span> (url是我们希望处理的)</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">//进行我们的处理</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            [[<span class="built_in">UIApplication</span> sharedApplication] openURL:url];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// swift</span></span><br><span class="line">func application(_ application: <span class="built_in">UIApplication</span>, <span class="keyword">continue</span> userActivity: <span class="built_in">NSUserActivity</span>, restorationHandler: @escaping ([<span class="built_in">UIUserActivityRestoring</span>]?) -&gt; Void) -&gt; Bool {</span><br><span class="line">    <span class="comment">// 判断是从Universal Links进来的链接</span></span><br><span class="line">    <span class="keyword">if</span> userActivity.activityType == <span class="built_in">NSUserActivityTypeBrowsingWeb</span>,</span><br><span class="line">        let webpageURL = userActivity.webpageURL {</span><br><span class="line">        print( <span class="string">"点击的链接是：\(webpageURL)"</span>)</span><br><span class="line">      }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>苹果为了方便开发者，提供了一个<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fsearch.developer.apple.com%2Fappsearch-validation-tool%2F">网页来验证</a>我们编写的这个apple-app-site-association是否合法有效，进入验证网址进行验证：</p><p><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/webp-20211013172219516" alt="img"></p><p><strong>注意</strong></p><ul><li>前端开发经常面临跨域问题，必须要求跨域，如果不跨域，就不行。</li><li>只有当前<code>webview</code>的<code>URL</code>域名，与跳转目标<code>URL</code>域名不一致时，<code>Universal Link</code>(通用链接)才生效。</li></ul><blockquote><p>该文章转载自简书<a href="https://www.jianshu.com/u/b09c13696e1c">CodeRookie</a> iOS 唤起APP之Universal Link(通用链接)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>setContentHuggingPriority和setContentCompressionResistancePriority的使用</title>
      <link href="/2021/10/13/setContentHuggingPriority%E5%92%8CsetContentCompressionResistancePriority%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/10/13/setContentHuggingPriority%E5%92%8CsetContentCompressionResistancePriority%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>当两个UILabel并排显示时，如何设置约束，让 leftLB 和 rightLB 正常显示就很重要了。</p><h3 id="方案1-左右两个Label的宽度相同，则约束设置如下：">方案1: 左右两个Label的宽度相同，则约束设置如下：</h3><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加标题约束,左边的label</span></span><br><span class="line">leftLb.snp.makeConstraints { make <span class="keyword">in</span></span><br><span class="line">    make.leading.equalTo(<span class="number">16</span>)</span><br><span class="line">    make.centerY.equalToSuperview()</span><br><span class="line">    make.trailing.equalTo(rightLb.snp.leading).offset(<span class="number">8</span>)</span><br><span class="line">    make.width.equalTo(rightLb)</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 添加内容约束,右边的label</span></span><br><span class="line">rightLb.snp.makeConstraints { make <span class="keyword">in</span></span><br><span class="line">    make.trailing.equalTo(<span class="operator">-</span><span class="number">16</span>)</span><br><span class="line">    make.centerY.equalToSuperview()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="方案2-左右两个Label的宽度不相等，此时需要根据设置-setContentHuggingPriority-和-setContentCompressionResistancePriority-来控制哪边的label拉伸，哪边的label收缩。">方案2: 左右两个Label的宽度不相等，此时需要根据设置 <code>setContentHuggingPriority</code> 和 <code>setContentCompressionResistancePriority</code> 来控制哪边的label拉伸，哪边的label收缩。</h3><ul><li><code>setContentHuggingPriority</code> 表示当前的Label的内容不想被拉伸</li><li><code>setContentCompressionResistancePriority</code> 表示当前的Label的内容不想被收缩</li></ul><blockquote><p>默认情况下: HuggingPriority == 250,  CompressionResistancePriority == 750</p></blockquote><p>需要考虑2种情况，左右2边数据均不足的时候，谁拉伸？左右2边数据均充足的时候，谁收缩？</p><p>首先解决第一个问题，左右2边数据均不足的时候，谁拉伸，这个由 <code>HuggingPriority</code> 控制。</p><ul><li>如果想让左边的内容拉伸，就设置左边的数值&lt;250（或让右边的&gt;250）；</li><li>如果想让右边的内容拉伸，就设置右边的数值&lt;250 (或让左边的&gt;250)。</li></ul><blockquote><p>左右两个Label对比，数值越大，越不想被拉伸，结果也不会被拉伸；数值越小，越容易被拉伸。</p></blockquote><p>然后解决第二个问题，左右2边数据都充足的时候，谁收缩，这个由 <code>ContentCompressionResistancePriority</code> 控制。</p><ul><li>如果想让左边的内容收缩，就设置左边的数值&lt;750（或让右边的&gt;750）;</li><li>如果想让右边的内容收缩，就设置右边的数值&lt;750（或让左边的&gt;750）</li></ul>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iris-go后台模版</title>
      <link href="/2021/10/09/iris-go%E5%90%8E%E5%8F%B0%E6%A8%A1%E7%89%88/"/>
      <url>/2021/10/09/iris-go%E5%90%8E%E5%8F%B0%E6%A8%A1%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h2 id="序">序</h2><p>本文是基于<a href="https://github.com/kataras/iris">iris 12</a> 扩展编写的类似<a href="https://eggjs.org/zh-cn/intro/">eggjs</a>框架结构。这里就简单介绍一下什么是iris，iris主要侧重于Web开发，提供了Web开发的一系列功能组件，基于MVC开发模式。<em><strong>如果你想直接开始，请点击<a href="https://github.com/jeromexiong/stencil-go">stencil-go</a>。</strong></em></p><p><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/20211009111105.png" alt=""></p><p>因为我本人之前写nodejs比较多，所以在学习go的时候就找到iris这个框架，毕竟它的关于里面就有一句<code>A true successor of expressjs and laravel</code>😄。有了框架之后就得约束一下结构不是，不然大家都随心所欲的写就很混乱了，所以我就参照了eggjs的结构进行设计。（当然这只是我个人的想法，毕竟这也才是我的入门项目，多有不足，还请指教( ´▽｀)</p><h2 id="基础功能">基础功能</h2><h3 id="目录结构">目录结构</h3><p>这里就简单介绍下目录约定规范</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">stencil-go</span><br><span class="line">├── README.md</span><br><span class="line">├── app</span><br><span class="line">│   ├── bindata</span><br><span class="line">│   ├── controller</span><br><span class="line">│   ├── core</span><br><span class="line">│   ├── extend（可选）</span><br><span class="line">│   ├── middleware（可选）</span><br><span class="line">│   ├── model</span><br><span class="line">│   ├── router</span><br><span class="line">│   └── service（可选）</span><br><span class="line">├── build_linux.sh</span><br><span class="line">├── build_win64.bat</span><br><span class="line">├── config</span><br><span class="line">│   ├── config.default.yaml</span><br><span class="line">│   └── config.prod.yaml</span><br><span class="line">├── config.yml（可选）</span><br><span class="line">├── go.mod</span><br><span class="line">├── main.go</span><br><span class="line">├── output</span><br><span class="line">│   ├── logs （日志目录）</span><br><span class="line">│   └── stencil-go (可执行二进制文件)</span><br><span class="line">└── public（可选）</span><br><span class="line">    ├── css</span><br><span class="line">    ├── index.html</span><br><span class="line">    └── js</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li><code>app/bindata/**</code> 用于打包配置文件为二进制文件，具体参见<a href="https://github.com/jteeuwen/go-bindata">bindata</a></li><li><code>app/controller/**</code> 用于解析用户的输入，处理后返回相应的结果</li><li><code>app/core/**</code> 用于解析各种非常但又必须的方法，例如读取配置、初始化日志等</li><li><code>app/extend/**</code> 用于框架的扩展，可选</li><li><code>app/middleware/**</code> 用于编写中间件，可选</li><li><code>app/model/**</code> 用于编写模型文件</li><li><code>app/router/**</code> 用于配置 URL 路由规则</li><li><code>app/service/**</code> 用于编写业务逻辑层，可选，建议使用</li><li><code>build_*</code> 由于构建对应平台的二进制文件</li><li><code>config/config.{env}.js</code> 用于编写配置文件</li><li><code>config.yml</code> mysql数据库转 struct 工具，可选 （ <a href="https://github.com/xxjwxc/gormt/blob/master/README_zh_cn.md">gormt</a>配置文件</li><li><code>main.go</code> 入口文件，用于加载配置并启动服务</li><li><code>public/**</code> 用于放置静态资源，可选</li><li><code>output/**</code> 用于放置日志等生成的文件</li></ul><h2 id="go-指令">go 指令</h2><h3 id="清除模块缓存-GOPATH-pkg-mod">清除模块缓存<code>$GOPATH/pkg/mod</code></h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go clean --modcache</span><br></pre></td></tr></tbody></table></figure><h3 id="安装打包器-go-bindata">安装打包器 <a href="https://github.com/jteeuwen/go-bindata">go-bindata</a></h3><blockquote><p>go-bindata -pkg &lt;指定包名&gt; -o &lt;目标输出文件,可包含路径&gt; &lt;源文件,可包含路径&gt;</p></blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/go-bindata/go-bindata/v3/go-bindata</span><br><span class="line">go-bindata -h</span><br></pre></td></tr></tbody></table></figure><p><code>go-bindata</code>如果不在环境变量中需要手动配置。在<code>~/.bash_profile</code>中添加以下行:</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># golang</span></span></span><br><span class="line">export PATH=~/go/bin:$PATH</span><br></pre></td></tr></tbody></table></figure><h3 id="mysql数据库转-struct-工具-gormt">mysql数据库转 struct 工具 <a href="https://github.com/xxjwxc/gormt/blob/master/README_zh_cn.md">gormt</a></h3><p>需要修改根目录下的<code>config.yml</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go get -u -v github.com/xxjwxc/gormt@master</span><br><span class="line">gormt -h</span><br><span class="line">gormt</span><br></pre></td></tr></tbody></table></figure><p>⚠️修改配置文件后，需要运行打包命令使配置生效</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go-bindata -pkg config_data -o app/bindata/config/config_data.go config/...</span><br></pre></td></tr></tbody></table></figure><h3 id="本地https测试-mkcert">本地<code>https</code>测试 <a href="https://github.com/FiloSottile/mkcert">mkcert</a></h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkcert -install</span><br><span class="line">mkcert local.cn "*.local.cn" localhost 127.0.0.1 ::1</span><br></pre></td></tr></tbody></table></figure><h2 id="常见问题">常见问题</h2><h3 id="go-updates-to-go-mod-needed-disabled-by-mod-readonly-packages-Load-error">go: updates to go.mod needed, disabled by -mod=readonly : packages.Load error</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod tidy</span><br></pre></td></tr></tbody></table></figure><h2 id="参考文档">参考文档</h2><ul><li><a href="https://www.iris-go.com/docs/#/?id=installation">iris-go 文档</a> 官方文档</li><li><a href="https://docs.iris-go.com/iris/getting-started/installation">iris-go 文档</a> 官方文档2</li><li><a href="https://www.kancloud.cn/terry/iris/1683304">iris12 文档</a> 三方中文文档</li><li><a href="http://www.topgoer.com/">go语言介绍</a>  三方中文文档</li><li><a href="https://www.kancloud.cn/sliver_horn/gorm/1861157">GORM V2 中文文档</a> 看云文档</li><li><a href="https://gorm.io/docs/gorm_config.html">GORM V2 英文文档</a> 官方文档</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac必装软件</title>
      <link href="/2021/09/17/Mac%E5%BF%85%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
      <url>/2021/09/17/Mac%E5%BF%85%E8%A3%85%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="系统软件">系统软件</h2><ol><li><a href="https://www.jianshu.com/p/b7b789a2ed2c">homebrew</a></li><li><a href="https://www.jianshu.com/p/4fc53d7d7620">mysql</a></li><li><a href="https://github.com/pyenv/pyenv#homebrew-on-macos">pyenv</a></li><li><a href="https://www.runoob.com/w3cnote/nvm-manager-node-versions.html">nvm</a></li><li><a href="">redis</a> 直接<code>brew install redis</code>即可</li></ol><h2 id="Mac必装软件">Mac必装软件</h2><ol><li><a href="https://iina.io/">IINA</a> 最好用的音视频播放软件（可播放任何地址</li><li><a href="https://www.typora.io/">Typora</a> 最好用的Markdown编辑工具 （➕<code>PicGo</code>实现图片自动上传</li><li><a href="https://code.visualstudio.com/">VsCode</a> 最好用的代码编辑工具</li><li><a href="http://www.neatdownloadmanager.com/index.php/en/">Neat Download Manager</a> 最快速的下载工具</li><li><a href="https://github.com/electerm/electerm">Electerm</a> 开源的跨平台Shell管理工具</li><li><a href="http://www.hostbuf.com/">FinalShell</a> 最好用跨平台Shell管理工具，就是不开源</li><li><a href="https://lemon.qq.com/">Tencent Lemon</a> 类似于CleanMyMac，但是完全免费</li><li><a href="https://apps.apple.com/cn/app/xmind-2020-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/id1327661892?mt=12">xmind</a> 思维导图</li><li><a href="https://apps.apple.com/cn/app/wps-office/id1443749478?mt=12">wps</a> 好用的文档中心</li><li><a href="https://tlanyan.me/v2ray-clients-download/">V2ray</a> mac 推荐<code>v2rayu</code>, win推荐<code>v2rayn</code> （免费订阅<a href="https://github.com/freefq/free">free</a> <a href="https://youjinnode.com/#/">幽禁节点</a></li></ol><hr><p>可选软件</p><ol><li><a href="https://obsproject.com/">OBS</a> 强大的推流工具</li><li><a href="https://apps.apple.com/cn/app/ishot-%E4%BC%98%E7%A7%80%E7%9A%84%E6%88%AA%E5%9B%BE%E5%BD%95%E5%B1%8F%E5%B7%A5%E5%85%B7/id1485844094?mt=12">ishot</a> 截图、长截图、贴图、标注、取色、录屏，样样优秀</li><li><a href="https://github.com/Molunerfinn/PicGo/">PicGo</a> 一个用于快速上传图片并获取图片 URL 链接的工具</li><li><a href="https://www.macwk.com/soft/daisydisk">Daisy Disk</a> 磁盘大小管理</li><li><a href="https://apps.apple.com/cn/app/pixeur-%E5%B1%8F%E5%B9%95%E6%8B%BE%E8%89%B2%E5%99%A8/id1507890049?mt=12">Pixeur - 屏幕拾色器</a> 取色器</li><li><a href="https://www.zhinin.com/parallels_desktop_15-mac.html">Parallels Desktop</a> 虚拟机管理 <a href="https://mp.weixin.qq.com/s/HpHRrJrUh7PJRYAWhusk-g">big sur</a></li><li><a href="https://www.macwk.com/soft/navicat-premium">Navicat Premium</a> 数据库管理</li></ol><p>MAC破解软件网址</p><ol><li><a href="https://www.macwk.com/">macwk</a></li><li><a href="https://www.zhinin.com/">知您网</a></li><li><a href="https://xclient.info/">XClient</a></li><li><a href="http://www.ruanman.net/?s=parallels">软曼网</a></li></ol><p>Chrome 插件</p><ol><li><a href="https://chrome.google.com/webstore/detail/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D-%E8%81%9A%E5%90%88%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/cdonnmffkdaoajfknoeeecmchibpmkmg?utm_source=chrome-ntp-icon">沙拉查词</a> 划词翻译</li><li><a href="https://chrome.google.com/webstore/detail/infinity-new-tab-pro/nnnkddnnlpamobajfibfdgfnbcnkgngh?utm_source=chrome-ntp-icon">infinity pro</a> 新标签</li></ol><h2 id="Mac-常见问题">Mac 常见问题</h2><h3 id="刷新DNS">刷新DNS</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dscacheutil -flushcache</span><br><span class="line">sudo killall -HUP mDNSResponder</span><br></pre></td></tr></tbody></table></figure><h3 id="xxx-app已损坏-打不开-你应该将它移到废纸篓-已解决">xxx.app已损坏,打不开.你应该将它移到废纸篓-已解决</h3><ol><li><p>系统偏好设置… -&gt; 安全性与隐私–&gt;修改为任何来源</p></li><li><p>serria里面没有“任何来源”这一项，需要打开终端执行sudo spctl --master-disable，这个时候再去系统偏好设置… -&gt; 安全性与隐私 是不是发现有了“任何来源”这一项</p></li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 允许任何来源的软件</span><br><span class="line">sudo spctl --master-disable</span><br><span class="line"># 关闭</span><br><span class="line">sudo spctl --master-enable</span><br></pre></td></tr></tbody></table></figure><h3 id="已经勾选“允许任何来源”，为啥还是提示“文件已损坏”">已经勾选“允许任何来源”，为啥还是提示“文件已损坏”</h3><p>打开终端，在终端中粘贴下面命令：【<code>sudo xattr -r -d com.apple.quarantine </code>】 ,然后输入个空格，再将应用程序目录中的软件拖拽到命令后面，按回车后输入密码执行。<br>比如：Sketch的命令是 sudo xattr -r -d com.apple.quarantine /Applications/Sketch.app<br>亲测可行</p><h3 id="MAC查看端口占用情况">MAC查看端口占用情况</h3><ul><li>lsof -i tcp:port  （port替换成端口号，比如6379）可以查看该端口被什么程序占用</li><li>kill port 关闭端口</li></ul><h3 id="显示finder的所有文件，包括隐藏文件">显示finder的所有文件，包括隐藏文件</h3><p><code>defaults write com.apple.Finder AppleShowAllFiles true</code><br>然后按住option+右击finder，重启finder<br><code>Command shift .</code> 隐藏显示隐藏文件</p><h3 id="Q-Can’t-chown-usr-local-in-High-Sierra">Q:Can’t chown /usr/local in High Sierra</h3><p>A:sudo chown -R $(whoami) $(brew --prefix)/*</p><h3 id="Xcode-支持库">Xcode 支持库</h3><p>链接：<a href="https://pan.baidu.com/s/1zXEFlt94bz3O1e3GdtG92w">https://pan.baidu.com/s/1zXEFlt94bz3O1e3GdtG92w</a> 密码: rc4k<br>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport</p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora+GitHub+PicGo打造丝滑的编辑体验</title>
      <link href="/2021/09/17/Typora-GitHub-PicGo%E6%89%93%E9%80%A0%E4%B8%9D%E6%BB%91%E7%9A%84%E7%BC%96%E8%BE%91%E4%BD%93%E9%AA%8C/"/>
      <url>/2021/09/17/Typora-GitHub-PicGo%E6%89%93%E9%80%A0%E4%B8%9D%E6%BB%91%E7%9A%84%E7%BC%96%E8%BE%91%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="前文">前文</h3><p>很多时候我们都需要一个公共的资源地址来存储自己的文章等信息，作为一个coder，那当然是要用我们专属的语言来写日记了（markdown）。这里就给大家讲解一下如何使用<a href="https://www.typora.io">typora</a> + <a href="https://github.com/Molunerfinn/PicGo">PicGo</a> + <a href="https://github.com/">github</a> 打造专属的编辑&amp;存储方式。</p><h3 id="准备">准备</h3><p>一、从上面的链接中下载并安装<code>typora</code>和<code>PicGo</code><br>二、 登录<code>github</code>账号</p><ol><li>创建公开资源库<br><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/image-20210917113156228.png" alt="image-20210917113156228"></li><li>生成新令牌</li></ol><ul><li><p>依次点击 右上角点<code>用户头像</code> -&gt; <code>Settings</code> -&gt; <code>Developer settings</code> -&gt;  <code>Personal access tokens</code>）-&gt; <code>Generate new token</code><br><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/image-20210917113803036.png" alt="image-20210917113803036"></p></li><li><p>设置令牌描述性名称，过期时间看自己情况选择，<code>Select scopes</code>只勾选：<code>repo</code>、 <code>user</code><br><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/image-20210917114208452.png" alt="image-20210917114208452"></p></li><li><p><code>Generate token</code> 生成令牌 <strong>⚠️令牌只显示一次，一定要复制保存好</strong></p></li></ul><h3 id="设置PicGo图床">设置PicGo图床</h3><ol><li><p>打开<code>picgo</code>后在顶部菜单栏<code>右击图标</code>，选择<code>打开详情窗口</code>，选择<code>PicGo设置</code>并勾选<code>GitHub图床</code>；就会在<code>图床设置</code>处显示图床<br><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/image-20210917115945814.png" alt="image-20210917115945814"></p></li><li><p>配置<code>GitHub图床</code></p></li></ol><ul><li>填写github账号名： <code>github账户/仓库名</code></li><li>一般为master或者main，具体看你的建的仓库</li><li>个人令牌，就是之前在github中生成私人令牌时得到的一串字符串</li><li>图片存放在仓库下面的哪个目录，不填就在项目的根目</li><li>默认的域名无法访问，修改为官方<code>https://raw.githubusercontent.com/github账户/仓库名/master/img/icon.png</code> 或者 CDN域名<code>https://cdn.jsdelivr.net/gh/github账户/仓库名/img/icon.png</code>，推荐使用cdn域名<br><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/image-20210917120159803.png" alt="image-20210917120159803"></li></ul><ol start="3"><li>复制任意图片后，点击菜单栏应用图标，即可看到图片上传</li></ol><h3 id="typora图片上传">typora图片上传</h3><ol><li>打开<code>typora</code>的<code>偏好设置</code>下的<code>图像</code></li><li><code>插入图片时</code>默认<code>无操作</code>，根据情况选择是否<code>上传图片</code>；勾选以下选项</li></ol><ul><li>对本地位置的图片应用上述规则</li></ul><ol start="3"><li><code>上传服务</code> 选<code>PicGo.app</code>后即可</li></ol><p><img src="https://cdn.jsdelivr.net/gh/jeromexiong/resources/img/image-20210917111332765.png" alt="image-20210917114821536"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">同样的，该文章就是以配置好的Typora编写的，所有截图复制后就上传并替换链接为cdn域名，简直方便的不行。</span><br><span class="line">顺便说下改文章的截图工具为ishot，自动阴影注释等👍</span><br></pre></td></tr></tbody></table></figure><ul><li><a href="https://apps.apple.com/cn/app/ishot-%E6%88%AA%E5%9B%BE-%E9%95%BF%E6%88%AA%E5%9B%BE-%E6%A0%87%E6%B3%A8%E5%B7%A5%E5%85%B7/id1485844094?mt=12">ishot</a> Mac上最强的截图工具</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Swift 5.1 高帧率朋友圈实现</title>
      <link href="/2020/04/29/Swift-5-1-%E9%AB%98%E5%B8%A7%E7%8E%87%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/04/29/Swift-5-1-%E9%AB%98%E5%B8%A7%E7%8E%87%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文基于<a href="https://github.com/Instagram/IGListKit">IGListKit 4.0</a>实现列表的高帧率滑动效果，项目地址见<a href="https://github.com/jeromexiong/cover-moments">GitHub</a></p></blockquote><h2 id="话不多说，上图">话不多说，上图</h2><p><img src="/images/moments.webp" alt="moments.webp.gif"></p><h2 id="创建基类控制器">创建基类控制器</h2><p>所有<code>IGListKit</code>的视图控制器都应该继承此类，减少复用</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseListVC</span>: <span class="title">UIViewController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> objects: [<span class="type">ListDiffable</span>] <span class="operator">=</span> [<span class="type">ListDiffable</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">var</span> collectionView: <span class="type">UICollectionView</span> <span class="operator">=</span> {</span><br><span class="line">        <span class="keyword">let</span> flow <span class="operator">=</span> <span class="type">UICollectionViewFlowLayout</span>()</span><br><span class="line">        <span class="keyword">let</span> collectionView <span class="operator">=</span> <span class="type">UICollectionView</span>(frame: <span class="type">CGRect</span>.zero, collectionViewLayout: flow)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">#available</span>(<span class="keyword">iOS</span> <span class="number">11.0</span>, <span class="operator">*</span>) {</span><br><span class="line">            collectionView.contentInsetAdjustmentBehavior <span class="operator">=</span> .never</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            automaticallyAdjustsScrollViewInsets <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">        }</span><br><span class="line">        collectionView.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.groupTableViewBackground</span><br><span class="line">        <span class="keyword">return</span> collectionView</span><br><span class="line">    }()</span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">var</span> adapter: <span class="type">ListAdapter</span> <span class="operator">=</span> {</span><br><span class="line">        <span class="keyword">let</span> adapter <span class="operator">=</span> <span class="type">ListAdapter</span>(updater: <span class="type">ListAdapterUpdater</span>(), viewController: <span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">return</span> adapter</span><br><span class="line">    }()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> {</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        view.addSubview(collectionView)</span><br><span class="line">        adapter.collectionView <span class="operator">=</span> collectionView</span><br><span class="line">        adapter.dataSource <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLayoutSubviews</span>()</span> {</span><br><span class="line">        <span class="keyword">super</span>.viewDidLayoutSubviews()</span><br><span class="line">        collectionView.frame <span class="operator">=</span> view.bounds</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BaseListVC</span> : <span class="title">ListAdapterDataSource</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">objects</span>(<span class="params">for</span> <span class="params">listAdapter</span>: <span class="type">ListAdapter</span>)</span> -&gt; [<span class="type">ListDiffable</span>] {</span><br><span class="line">        <span class="keyword">return</span> objects</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">listAdapter</span>(<span class="keyword">_</span> <span class="params">listAdapter</span>: <span class="type">ListAdapter</span>, <span class="params">sectionControllerFor</span> <span class="params">object</span>: <span class="keyword">Any</span>)</span> -&gt; <span class="type">ListSectionController</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ListSectionController</span>()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">emptyView</span>(<span class="params">for</span> <span class="params">listAdapter</span>: <span class="type">ListAdapter</span>)</span> -&gt; <span class="type">UIView</span>? {</span><br><span class="line">        <span class="comment">// 无数据时collectionView的展示</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="创建MomentInfo模型">创建<code>MomentInfo</code>模型</h2><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MomentInfo</span> </span>{</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MomentInfo</span>: <span class="title">ListDiffable</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">diffIdentifier</span>()</span> -&gt; <span class="type">NSObjectProtocol</span> {</span><br><span class="line">        <span class="comment">// 区分是否为同一对象，可多属性叠加</span></span><br><span class="line">        <span class="keyword">return</span> id <span class="keyword">as</span> <span class="type">NSObjectProtocol</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断对象是否相同，不同(false)则刷新</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEqual</span>(<span class="params">toDiffableObject</span> <span class="params">object</span>: <span class="type">ListDiffable</span>?)</span> -&gt; <span class="type">Bool</span> {</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">self</span> <span class="operator">===</span> object <span class="keyword">else</span> { <span class="keyword">return</span> <span class="literal">true</span> }</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> object <span class="operator">=</span> object <span class="keyword">as?</span> <span class="type">MomentInfo</span> <span class="keyword">else</span> { <span class="keyword">return</span> <span class="literal">false</span> }</span><br><span class="line">        <span class="keyword">return</span> id <span class="operator">==</span> object.id</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MomentInfo</span>: <span class="title">Equatable</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">==</span> (<span class="params">lhs</span>: <span class="type">MomentInfo</span>, <span class="params">rhs</span>: <span class="type">MomentInfo</span>)</span> -&gt; <span class="type">Bool</span> {</span><br><span class="line">        <span class="keyword">return</span> lhs.isEqual(toDiffableObject: rhs)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="子类复写">子类复写</h2><ol><li>更新数据</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//info -&gt; MomentInfo的对象</span></span><br><span class="line"><span class="keyword">self</span>.objects.append(info)</span><br><span class="line"><span class="comment">// 数据添加完成后更新</span></span><br><span class="line"><span class="keyword">self</span>.adapter.performUpdates(animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>复写绑定Section</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">listAdapter</span>(<span class="keyword">_</span> <span class="params">listAdapter</span>: <span class="type">ListAdapter</span>, <span class="params">sectionControllerFor</span> <span class="params">object</span>: <span class="keyword">Any</span>)</span> -&gt; <span class="type">ListSectionController</span> {</span><br><span class="line">    <span class="comment">// 此object的类型就是更新的self.objects的item类型</span></span><br><span class="line">    <span class="keyword">switch</span> object {</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">is</span> <span class="type">MomentInfo</span>:</span><br><span class="line">        <span class="comment">// MomentBindingSection 继承自 ListBindingSectionController</span></span><br><span class="line">        <span class="keyword">let</span> section <span class="operator">=</span> <span class="type">MomentBindingSection</span>()</span><br><span class="line">        <span class="keyword">return</span> section</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">fatalError</span>()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="使用ListBindingSectionController绑定多个cell">使用<code>ListBindingSectionController</code>绑定多个cell</h2><ol><li>创建<code>UICollectionViewCell</code>⚠️<strong>只能有一种样式布局，不同样式需要不同的cell</strong></li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MomentTopCell</span>: <span class="title">UICollectionViewCell</span> </span>{</span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MomentTopCell</span>: <span class="title">ListBindable</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">bindViewModel</span>(<span class="keyword">_</span> <span class="params">viewModel</span>: <span class="keyword">Any</span>)</span> {</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> viewModel <span class="operator">=</span> viewModel <span class="keyword">as?</span> <span class="type">MomentInfo</span> <span class="keyword">else</span> { <span class="keyword">return</span> }</span><br><span class="line">        <span class="comment">// 更新cell数据</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>获取cell对象</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">momentTopCell</span>(<span class="params">at</span> <span class="params">index</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">MomentTopCell</span> {</span><br><span class="line"><span class="comment">//  guard let cell = collectionContext?.dequeueReusableCell(withNibName: MomentTopCell.jx_className, bundle: nil, for: self, at: index) as? MomentTopCell else { fatalError() }</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> cell <span class="operator">=</span> collectionContext<span class="operator">?</span>.dequeueReusableCell(of: <span class="type">MomentTopCell</span>.<span class="keyword">self</span>, for: <span class="keyword">self</span>, at: index) <span class="keyword">as?</span> <span class="type">MomentTopCell</span> <span class="keyword">else</span> { <span class="built_in">fatalError</span>() }</span><br><span class="line">    <span class="comment">// 传入cell数据</span></span><br><span class="line">    cell.bindViewModel(object<span class="operator">!</span>)</span><br><span class="line">    <span class="keyword">return</span> cell</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>绑定视图模型(ViewModel)，可使用枚举替代</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ViewModelEnum</span>: <span class="title">String</span> </span>{</span><br><span class="line">    <span class="keyword">case</span> top, header, image_single, location, bottom</span><br><span class="line">}</span><br><span class="line"><span class="comment">/// 绑定viewmodels，用以区分不同cell</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sectionController</span>(<span class="keyword">_</span> <span class="params">sectionController</span>: <span class="type">ListBindingSectionController</span>&lt;<span class="type">ListDiffable</span>&gt;, <span class="params">viewModelsFor</span> <span class="params">object</span>: <span class="keyword">Any</span>)</span> -&gt; [<span class="type">ListDiffable</span>] {</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> object <span class="operator">=</span> object <span class="keyword">as?</span> <span class="type">MomentInfo</span> <span class="keyword">else</span> { <span class="keyword">return</span> [] }</span><br><span class="line">    <span class="keyword">var</span> results: [<span class="type">ListDiffable</span>] <span class="operator">=</span> []</span><br><span class="line">    <span class="keyword">if</span> object.userInfo <span class="operator">!=</span> <span class="literal">nil</span> {</span><br><span class="line">        results.append(<span class="type">ViewModelEnum</span>.top.rawValue <span class="keyword">as</span> <span class="type">ListDiffable</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> object.images.count <span class="operator">==</span> <span class="number">1</span> {</span><br><span class="line">        results.append(<span class="type">ViewModelEnum</span>.image_single.rawValue <span class="keyword">as</span> <span class="type">ListDiffable</span>)</span><br><span class="line">    }<span class="keyword">else</span> {</span><br><span class="line">        results.append(<span class="type">ViewModelEnum</span>.header.rawValue <span class="keyword">as</span> <span class="type">ListDiffable</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> <span class="operator">!</span>object.location.isEmpty {</span><br><span class="line">        results.append(<span class="type">ViewModelEnum</span>.location.rawValue <span class="keyword">as</span> <span class="type">ListDiffable</span>)</span><br><span class="line">    }</span><br><span class="line">    results.append(<span class="type">ViewModelEnum</span>.bottom.rawValue <span class="keyword">as</span> <span class="type">ListDiffable</span>)</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 不同viewmodel对应的cell</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sectionController</span>(<span class="keyword">_</span> <span class="params">sectionController</span>: <span class="type">ListBindingSectionController</span>&lt;<span class="type">ListDiffable</span>&gt;, <span class="params">cellForViewModel</span> <span class="params">viewModel</span>: <span class="keyword">Any</span>, <span class="params">at</span> <span class="params">index</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">UICollectionViewCell</span> &amp; <span class="type">ListBindable</span> {</span><br><span class="line">    <span class="keyword">let</span> viewModel <span class="operator">=</span> <span class="type">ViewModelEnum</span>(rawValue: viewModel <span class="keyword">as!</span> <span class="type">String</span>)<span class="operator">!</span></span><br><span class="line">    <span class="keyword">switch</span> viewModel {</span><br><span class="line">    <span class="keyword">case</span> .top:</span><br><span class="line">        <span class="keyword">return</span> momentTopCell(at: index)</span><br><span class="line">    <span class="keyword">case</span> .image_single:</span><br><span class="line">        <span class="keyword">return</span> momentHeaderImageCell(at: index)</span><br><span class="line">    <span class="keyword">case</span> .header:</span><br><span class="line">        <span class="keyword">return</span> momentHeaderCell(at: index)</span><br><span class="line">    <span class="keyword">case</span> .location:</span><br><span class="line">        <span class="keyword">return</span> momentLocationCell(at: index)</span><br><span class="line">    <span class="keyword">case</span> .bottom:</span><br><span class="line">        <span class="keyword">return</span> momentBottomCell(at: index)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/// 不同cell对应的size</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sectionController</span>(<span class="keyword">_</span> <span class="params">sectionController</span>: <span class="type">ListBindingSectionController</span>&lt;<span class="type">ListDiffable</span>&gt;, <span class="params">sizeForViewModel</span> <span class="params">viewModel</span>: <span class="keyword">Any</span>, <span class="params">at</span> <span class="params">index</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">CGSize</span> {</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> object <span class="operator">=</span> object <span class="keyword">as?</span> <span class="type">MomentInfo</span> <span class="keyword">else</span> { <span class="built_in">fatalError</span>() }</span><br><span class="line">    <span class="keyword">let</span> viewModel <span class="operator">=</span> <span class="type">ViewModelEnum</span>(rawValue: viewModel <span class="keyword">as!</span> <span class="type">String</span>)<span class="operator">!</span></span><br><span class="line">    <span class="keyword">let</span> width: <span class="type">CGFloat</span> <span class="operator">=</span> collectionContext<span class="operator">!</span>.containerSize(for: <span class="keyword">self</span>).width</span><br><span class="line">    <span class="keyword">switch</span> viewModel {</span><br><span class="line">    <span class="keyword">case</span> .top:</span><br><span class="line">        <span class="keyword">return</span> <span class="type">CGSize</span>(width: width, height: <span class="number">400</span>)</span><br><span class="line">    <span class="keyword">case</span> .header, .image_single:</span><br><span class="line">        <span class="keyword">return</span> <span class="type">CGSize</span>(width: width, height: object.cellHeight)</span><br><span class="line">    <span class="keyword">case</span> .location:</span><br><span class="line">        <span class="keyword">return</span> <span class="type">CGSize</span>(width: width, height: <span class="number">30</span>)</span><br><span class="line">    <span class="keyword">case</span> .bottom:</span><br><span class="line">        <span class="keyword">return</span> <span class="type">CGSize</span>(width: width, height: <span class="number">30</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂记</title>
      <link href="/2020/04/29/%E6%9D%82%E8%AE%B0/"/>
      <url>/2020/04/29/%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="统计代码量"><a href="http://www.cnblogs.com/kevingrace/p/6768005.html">统计代码量</a></h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">find . -name "*.js" -or -name "*.json" -or -name "*.wxml" -or -name "*.wxss" |xargs cat|grep -r -v ^$|wc -l</span><br><span class="line"></span><br><span class="line">find . -name "*.swift" -or -name "*.xib" |xargs grep -v "^$"|wc -l</span><br><span class="line">find . -name "*.m" -or -name "*.h" -or -name "*.xib" -or -name "*.c" |xargs wc -l</span><br><span class="line">find . "(" -name "*.m" -or -name "*.mm" -or -name "*.cpp" -or -name "*.h" -or -name "*.rss" ")" -print | xargs wc -l</span><br><span class="line"></span><br><span class="line">-name  "*.m" 就表示扩展名为.m的文件。</span><br><span class="line">统计java文件和xml文件的命令分别是：</span><br><span class="line"></span><br><span class="line">find . "(" -name "*.java"  ")" -print | xargs wc -l</span><br><span class="line">find . "(" -name "*.xml"  ")" -print | xargs wc -l</span><br><span class="line"></span><br><span class="line">grep -v "^$"是去掉空行</span><br><span class="line">注释也统计在代码量之内，毕竟也一个字一个字码出来的</span><br></pre></td></tr></tbody></table></figure><h2 id="阿里云服务器搭建git服务器"><a href="https://www.cnblogs.com/dst5650/p/8503772.html">阿里云服务器搭建git服务器</a></h2><h2 id="挖矿机问题">挖矿机问题</h2><ul><li><a href="https://www.freebuf.com/vuls/200289.html">sysupdate 的进程占据了绝大部分的 CPU 资源</a></li></ul><h2 id="外部运行AS模拟器">外部运行AS模拟器</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd Library/Android/sdk/emulator/</span><br><span class="line">emulator -list-avds</span><br><span class="line">emulator -avd Nexus_5X_API_28_x86</span><br></pre></td></tr></tbody></table></figure><ul><li><code>uname -a</code> 查看Linux内核版本命令</li><li><code>lsb_release -a</code> 即可列出所有版本信息</li></ul>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IGListKit使用</title>
      <link href="/2020/04/29/IGListKit%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/04/29/IGListKit%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="创建基类控制器">创建基类控制器</h2><p>所有<code>IGListKit</code>的视图控制器都应该继承此类，减少复用</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseListVC</span>: <span class="title">UIViewController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> objects: [<span class="type">ListDiffable</span>] <span class="operator">=</span> [<span class="type">ListDiffable</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">var</span> collectionView: <span class="type">UICollectionView</span> <span class="operator">=</span> {</span><br><span class="line">        <span class="keyword">let</span> flow <span class="operator">=</span> <span class="type">UICollectionViewFlowLayout</span>()</span><br><span class="line">        <span class="keyword">let</span> collectionView <span class="operator">=</span> <span class="type">UICollectionView</span>(frame: <span class="type">CGRect</span>.zero, collectionViewLayout: flow)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">#available</span>(<span class="keyword">iOS</span> <span class="number">11.0</span>, <span class="operator">*</span>) {</span><br><span class="line">            collectionView.contentInsetAdjustmentBehavior <span class="operator">=</span> .never</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            automaticallyAdjustsScrollViewInsets <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">        }</span><br><span class="line">        collectionView.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.groupTableViewBackground</span><br><span class="line">        <span class="keyword">return</span> collectionView</span><br><span class="line">    }()</span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">var</span> adapter: <span class="type">ListAdapter</span> <span class="operator">=</span> {</span><br><span class="line">        <span class="keyword">let</span> adapter <span class="operator">=</span> <span class="type">ListAdapter</span>(updater: <span class="type">ListAdapterUpdater</span>(), viewController: <span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">return</span> adapter</span><br><span class="line">    }()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> {</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        view.addSubview(collectionView)</span><br><span class="line">        adapter.collectionView <span class="operator">=</span> collectionView</span><br><span class="line">        adapter.dataSource <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLayoutSubviews</span>()</span> {</span><br><span class="line">        <span class="keyword">super</span>.viewDidLayoutSubviews()</span><br><span class="line">        collectionView.frame <span class="operator">=</span> view.bounds</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BaseListVC</span> : <span class="title">ListAdapterDataSource</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">objects</span>(<span class="params">for</span> <span class="params">listAdapter</span>: <span class="type">ListAdapter</span>)</span> -&gt; [<span class="type">ListDiffable</span>] {</span><br><span class="line">        <span class="keyword">return</span> objects</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">listAdapter</span>(<span class="keyword">_</span> <span class="params">listAdapter</span>: <span class="type">ListAdapter</span>, <span class="params">sectionControllerFor</span> <span class="params">object</span>: <span class="keyword">Any</span>)</span> -&gt; <span class="type">ListSectionController</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ListSectionController</span>()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">emptyView</span>(<span class="params">for</span> <span class="params">listAdapter</span>: <span class="type">ListAdapter</span>)</span> -&gt; <span class="type">UIView</span>? {</span><br><span class="line">        <span class="comment">// 无数据时collectionView的展示</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="创建MomentInfo模型">创建<code>MomentInfo</code>模型</h2><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MomentInfo</span> </span>{</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MomentInfo</span>: <span class="title">ListDiffable</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">diffIdentifier</span>()</span> -&gt; <span class="type">NSObjectProtocol</span> {</span><br><span class="line">        <span class="comment">// 区分是否为同一对象，可多属性叠加</span></span><br><span class="line">        <span class="keyword">return</span> id <span class="keyword">as</span> <span class="type">NSObjectProtocol</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断对象是否相同，不同(false)则刷新</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEqual</span>(<span class="params">toDiffableObject</span> <span class="params">object</span>: <span class="type">ListDiffable</span>?)</span> -&gt; <span class="type">Bool</span> {</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">self</span> <span class="operator">===</span> object <span class="keyword">else</span> { <span class="keyword">return</span> <span class="literal">true</span> }</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> object <span class="operator">=</span> object <span class="keyword">as?</span> <span class="type">MomentInfo</span> <span class="keyword">else</span> { <span class="keyword">return</span> <span class="literal">false</span> }</span><br><span class="line">        <span class="keyword">return</span> id <span class="operator">==</span> object.id</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MomentInfo</span>: <span class="title">Equatable</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">==</span> (<span class="params">lhs</span>: <span class="type">MomentInfo</span>, <span class="params">rhs</span>: <span class="type">MomentInfo</span>)</span> -&gt; <span class="type">Bool</span> {</span><br><span class="line">        <span class="keyword">return</span> lhs.isEqual(toDiffableObject: rhs)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="子类复写">子类复写</h2><ol><li>更新数据</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//info -&gt; MomentInfo的对象</span></span><br><span class="line"><span class="keyword">self</span>.objects.append(info)</span><br><span class="line"><span class="comment">// 数据添加完成后更新</span></span><br><span class="line"><span class="keyword">self</span>.adapter.performUpdates(animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>复写绑定Section</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">listAdapter</span>(<span class="keyword">_</span> <span class="params">listAdapter</span>: <span class="type">ListAdapter</span>, <span class="params">sectionControllerFor</span> <span class="params">object</span>: <span class="keyword">Any</span>)</span> -&gt; <span class="type">ListSectionController</span> {</span><br><span class="line">    <span class="comment">// 此object的类型就是更新的self.objects的item类型</span></span><br><span class="line">    <span class="keyword">switch</span> object {</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">is</span> <span class="type">MomentInfo</span>:</span><br><span class="line">        <span class="comment">// MomentBindingSection 继承自 ListBindingSectionController</span></span><br><span class="line">        <span class="keyword">let</span> section <span class="operator">=</span> <span class="type">MomentBindingSection</span>()</span><br><span class="line">        <span class="keyword">return</span> section</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">fatalError</span>()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="使用ListBindingSectionController绑定多个cell">使用<code>ListBindingSectionController</code>绑定多个cell</h2><ol><li>创建<code>UICollectionViewCell</code>⚠️<strong>只能有一种样式布局，不同样式需要不同的cell</strong></li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MomentTopCell</span>: <span class="title">UICollectionViewCell</span> </span>{</span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MomentTopCell</span>: <span class="title">ListBindable</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">bindViewModel</span>(<span class="keyword">_</span> <span class="params">viewModel</span>: <span class="keyword">Any</span>)</span> {</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> viewModel <span class="operator">=</span> viewModel <span class="keyword">as?</span> <span class="type">MomentInfo</span> <span class="keyword">else</span> { <span class="keyword">return</span> }</span><br><span class="line">        <span class="comment">// 更新cell数据</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>获取cell对象</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">momentTopCell</span>(<span class="params">at</span> <span class="params">index</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">MomentTopCell</span> {</span><br><span class="line"><span class="comment">//  guard let cell = collectionContext?.dequeueReusableCell(withNibName: MomentTopCell.jx_className, bundle: nil, for: self, at: index) as? MomentTopCell else { fatalError() }</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> cell <span class="operator">=</span> collectionContext<span class="operator">?</span>.dequeueReusableCell(of: <span class="type">MomentTopCell</span>.<span class="keyword">self</span>, for: <span class="keyword">self</span>, at: index) <span class="keyword">as?</span> <span class="type">MomentTopCell</span> <span class="keyword">else</span> { <span class="built_in">fatalError</span>() }</span><br><span class="line">    <span class="comment">// 传入cell数据</span></span><br><span class="line">    cell.bindViewModel(object<span class="operator">!</span>)</span><br><span class="line">    <span class="keyword">return</span> cell</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>绑定视图模型(ViewModel)，可使用枚举替代</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ViewModelEnum</span>: <span class="title">String</span> </span>{</span><br><span class="line">    <span class="keyword">case</span> top, header, image_single, location, bottom</span><br><span class="line">}</span><br><span class="line"><span class="comment">/// 绑定viewmodels，用以区分不同cell</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sectionController</span>(<span class="keyword">_</span> <span class="params">sectionController</span>: <span class="type">ListBindingSectionController</span>&lt;<span class="type">ListDiffable</span>&gt;, <span class="params">viewModelsFor</span> <span class="params">object</span>: <span class="keyword">Any</span>)</span> -&gt; [<span class="type">ListDiffable</span>] {</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> object <span class="operator">=</span> object <span class="keyword">as?</span> <span class="type">MomentInfo</span> <span class="keyword">else</span> { <span class="keyword">return</span> [] }</span><br><span class="line">    <span class="keyword">var</span> results: [<span class="type">ListDiffable</span>] <span class="operator">=</span> []</span><br><span class="line">    <span class="keyword">if</span> object.userInfo <span class="operator">!=</span> <span class="literal">nil</span> {</span><br><span class="line">        results.append(<span class="type">ViewModelEnum</span>.top.rawValue <span class="keyword">as</span> <span class="type">ListDiffable</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> object.images.count <span class="operator">==</span> <span class="number">1</span> {</span><br><span class="line">        results.append(<span class="type">ViewModelEnum</span>.image_single.rawValue <span class="keyword">as</span> <span class="type">ListDiffable</span>)</span><br><span class="line">    }<span class="keyword">else</span> {</span><br><span class="line">        results.append(<span class="type">ViewModelEnum</span>.header.rawValue <span class="keyword">as</span> <span class="type">ListDiffable</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> <span class="operator">!</span>object.location.isEmpty {</span><br><span class="line">        results.append(<span class="type">ViewModelEnum</span>.location.rawValue <span class="keyword">as</span> <span class="type">ListDiffable</span>)</span><br><span class="line">    }</span><br><span class="line">    results.append(<span class="type">ViewModelEnum</span>.bottom.rawValue <span class="keyword">as</span> <span class="type">ListDiffable</span>)</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 不同viewmodel对应的cell</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sectionController</span>(<span class="keyword">_</span> <span class="params">sectionController</span>: <span class="type">ListBindingSectionController</span>&lt;<span class="type">ListDiffable</span>&gt;, <span class="params">cellForViewModel</span> <span class="params">viewModel</span>: <span class="keyword">Any</span>, <span class="params">at</span> <span class="params">index</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">UICollectionViewCell</span> &amp; <span class="type">ListBindable</span> {</span><br><span class="line">    <span class="keyword">let</span> viewModel <span class="operator">=</span> <span class="type">ViewModelEnum</span>(rawValue: viewModel <span class="keyword">as!</span> <span class="type">String</span>)<span class="operator">!</span></span><br><span class="line">    <span class="keyword">switch</span> viewModel {</span><br><span class="line">    <span class="keyword">case</span> .top:</span><br><span class="line">        <span class="keyword">return</span> momentTopCell(at: index)</span><br><span class="line">    <span class="keyword">case</span> .image_single:</span><br><span class="line">        <span class="keyword">return</span> momentHeaderImageCell(at: index)</span><br><span class="line">    <span class="keyword">case</span> .header:</span><br><span class="line">        <span class="keyword">return</span> momentHeaderCell(at: index)</span><br><span class="line">    <span class="keyword">case</span> .location:</span><br><span class="line">        <span class="keyword">return</span> momentLocationCell(at: index)</span><br><span class="line">    <span class="keyword">case</span> .bottom:</span><br><span class="line">        <span class="keyword">return</span> momentBottomCell(at: index)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/// 不同cell对应的size</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sectionController</span>(<span class="keyword">_</span> <span class="params">sectionController</span>: <span class="type">ListBindingSectionController</span>&lt;<span class="type">ListDiffable</span>&gt;, <span class="params">sizeForViewModel</span> <span class="params">viewModel</span>: <span class="keyword">Any</span>, <span class="params">at</span> <span class="params">index</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">CGSize</span> {</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> object <span class="operator">=</span> object <span class="keyword">as?</span> <span class="type">MomentInfo</span> <span class="keyword">else</span> { <span class="built_in">fatalError</span>() }</span><br><span class="line">    <span class="keyword">let</span> viewModel <span class="operator">=</span> <span class="type">ViewModelEnum</span>(rawValue: viewModel <span class="keyword">as!</span> <span class="type">String</span>)<span class="operator">!</span></span><br><span class="line">    <span class="keyword">let</span> width: <span class="type">CGFloat</span> <span class="operator">=</span> collectionContext<span class="operator">!</span>.containerSize(for: <span class="keyword">self</span>).width</span><br><span class="line">    <span class="keyword">switch</span> viewModel {</span><br><span class="line">    <span class="keyword">case</span> .top:</span><br><span class="line">        <span class="keyword">return</span> <span class="type">CGSize</span>(width: width, height: <span class="number">400</span>)</span><br><span class="line">    <span class="keyword">case</span> .header, .image_single:</span><br><span class="line">        <span class="keyword">return</span> <span class="type">CGSize</span>(width: width, height: object.cellHeight)</span><br><span class="line">    <span class="keyword">case</span> .location:</span><br><span class="line">        <span class="keyword">return</span> <span class="type">CGSize</span>(width: width, height: <span class="number">30</span>)</span><br><span class="line">    <span class="keyword">case</span> .bottom:</span><br><span class="line">        <span class="keyword">return</span> <span class="type">CGSize</span>(width: width, height: <span class="number">30</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 笔记</title>
      <link href="/2020/04/29/Flutter%20%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/04/29/Flutter%20%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="iOS">iOS</h2><h3 id="插件swift-调用oc库">插件swift 调用oc库</h3><ol><li><code>project.podspec</code>文件添加库依赖 <code>s.dependency 'name', 'version'</code></li><li>如需桥接文件<ol><li><code>Pods/Development Pods/project/../ios/Classes/</code>目录下创建桥接文件<code>Flutter-Bridging-Header.h</code>，并引用库头文件</li><li>在<code>project-umbrella.h</code>文件中添加<code>#import "Flutter-Bridging-Header.h"</code>(也可以全局搜索<code>ProjectPlugin.h</code>后添加在其下)⚠️Podfile必须有<code>use_framework!</code>属性才会生成umbrella文件</li></ol></li><li>如需要添加其他资源文件，需要在<code>project.podspec</code>中配置</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">search_paths = [</span><br><span class="line">    '${SDKROOT}/usr/include/libxml2'</span><br><span class="line">]</span><br><span class="line">s.pod_target_xcconfig = {</span><br><span class="line">    'DEFINES_MODULE' =&gt; 'YES',</span><br><span class="line">    'VALID_ARCHS[sdk=iphonesimulator*]' =&gt; 'x86_64',</span><br><span class="line">    'HEADER_SEARCH_PATHS' =&gt; search_paths.join(' '),</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>进入<code>Podfile</code>所在目录<code>pod install</code></li><li>如果调用iOS插件失败，则需要在<code>Info.plist</code>中添加以下代码</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;key&gt;io.flutter.embedded_views_preview&lt;/key&gt;</span><br><span class="line">&lt;true/&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="Android">Android</h2><h3 id="密钥-adb">密钥 &amp; adb</h3><ul><li>获取jks应用签名 <code>keytool -list -v -keystore yourkeystore</code>，选取对应别名的<code>MD5</code>: <code>MD5.split(":").join("")</code></li><li><code>adb devices</code>查看连接设备；<code>adb -s serial</code>指定设备连接；<code>adb -s serial shell</code>连接指定设备shell</li></ul><h2 id="Flutter">Flutter</h2><h3 id="自动方向监听">自动方向监听</h3><ol><li>添加每一帧回调方法</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void addPersistentFrameCallback(VoidCallback cb) {</span><br><span class="line">  final widgetsBinding = WidgetsBinding.instance;</span><br><span class="line">  widgetsBinding.addPostFrameCallback((callback) {</span><br><span class="line">    widgetsBinding.addPersistentFrameCallback((callback) {</span><br><span class="line">      if (cb != null) cb();</span><br><span class="line">      //触发一帧的绘制</span><br><span class="line">      widgetsBinding.scheduleFrame();</span><br><span class="line">    });</span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>在<code>initState</code>方法中初始化监听</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">addPersistentFrameCallback(() {</span><br><span class="line">  var orientation = MediaQuery.of(videoContext).orientation;</span><br><span class="line">  bool _fullscreen;</span><br><span class="line">  if (orientation == Orientation.landscape) {</span><br><span class="line">    //横屏</span><br><span class="line">    _fullscreen = true;</span><br><span class="line">    SystemChrome.setEnabledSystemUIOverlays([]);</span><br><span class="line">  } else if (orientation == Orientation.portrait) {</span><br><span class="line">    _fullscreen = false;</span><br><span class="line">    SystemChrome.setEnabledSystemUIOverlays(SystemUiOverlay.values);</span><br><span class="line">  }</span><br><span class="line">  if (_fullscreen != fullscreened) {</span><br><span class="line">    setState(() {</span><br><span class="line">      fullscreened = !fullscreened;</span><br><span class="line">      //触发全屏事件</span><br><span class="line">      if (widget.onfullscreen != null) {</span><br><span class="line">        widget.onfullscreen(fullscreened);</span><br><span class="line">      }</span><br><span class="line">    });</span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h3 id="拦截物理返回按键">拦截物理返回按键</h3><ol><li>WillPopScope，会拦截右滑</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int last = 0;</span><br><span class="line">Future&lt;bool&gt; doubleClickBack() {</span><br><span class="line">  int now = DateTime.now().millisecond;</span><br><span class="line">  if (now - last &gt; 800) {</span><br><span class="line">    last = DateTime.now().millisecond;</span><br><span class="line">    return Future.value(false);</span><br><span class="line">  } else {</span><br><span class="line">    return Future.value(true);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">WillPopScope(</span><br><span class="line">  onWillPop: doubleClickBack,</span><br><span class="line">  child: Widget</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>弹出一个本地路由防止物理按键直接返回</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void _navigateLocally(context) async {</span><br><span class="line">  if (!fullscreened) {</span><br><span class="line">    if (ModalRoute.of(context).willHandlePopInternally) {</span><br><span class="line">      Navigator.of(context).pop();</span><br><span class="line">    }</span><br><span class="line">    return;</span><br><span class="line">  }</span><br><span class="line">  ModalRoute.of(context).addLocalHistoryEntry(LocalHistoryEntry(onRemove: () {</span><br><span class="line">    if (fullscreened) toggleFullScreen();</span><br><span class="line">  }));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="问题">问题</h2><h3 id="升级Xcode11-4导致Flutter项目报错Building-for-iOS-but-the-linked-and-embedded-framework-App-framework’的处理">升级Xcode11.4导致Flutter项目报错Building for iOS, but the linked and embedded framework 'App.framework’的处理</h3><ol><li>进入项目根目录</li><li>flutter clean</li><li>rm -rf ios/Flutter/App.framework</li></ol>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
          <category> 跨平台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift 笔记</title>
      <link href="/2018/01/01/Swift%20%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/01/01/Swift%20%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>Xcode</h1><h2 id="Xcode自动管理证书文件模式下更新provisioning-profile文件">Xcode自动管理证书文件模式下更新provisioning profile文件</h2><ol><li><a href="http://xn--develop-5t0lp6ak28b1l8cjw6d.apple.com">添加设备到develop.apple.com</a></li><li>Xcode切到相应的target的General tab下，然后点击(!)按钮展示provisioning profile文件详情，然后拖动左上角的profile图标到终端获取provisioning profile文件名</li><li>打开~/Library/MobileDevice/Provisioning Profiles目录，然后删除相同文件名的provisioning profile文件</li><li>Xcode会自动下载最新的provisioning profile文件</li></ol><h2 id="Xcode-打包发布">Xcode 打包发布</h2><ol><li>打包证书</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">打包证书最多只有三个，需要根据提示文字选择正确的证书。</span><br><span class="line">若证书创建后一直无法正常使用，重启后即可</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>若无法发布正式，可以发布TestFlight版本测试</li></ol><h2 id="Xcode-11打包上传时，一直卡在Authenticating-with-the-App-Store…">Xcode 11打包上传时，一直卡在Authenticating with the App Store…</h2><ol><li>xcode <code>shift+command+k</code> 清除缓存</li><li><code> open ~/Library/Caches/com.apple.amp.itmstransporter/</code> 删除文件夹内的所有文件</li><li><code> /Applications/Xcode.app/Contents/SharedFrameworks/ContentDeliveryServices.framework/Versions/A/itms/bin/iTMSTransporter</code> 在终端输入 （亲测在这里打开VPN会快很多，下载内容大概60M+）<a href="https://pan.baidu.com/s/1ZiLIsuGRBIV1Wv8XVR_uVg">百度云</a> [wk8u]</li><li>下载完后，重启Xcode</li></ol><h2 id="设置推送证书（两种方式">设置推送证书（两种方式</h2><h3 id="token-Authentication">token Authentication</h3><p>创建APNs推送服务Key。<code>Certificates, Identifiers &amp; Profiles</code> -&gt; <code>Keys</code> -&gt; <code>JPush Auth Key</code></p><p>⚠️下载完成的是一个<code>.p8</code>文件，只允许下载一次，注意保存</p><h3 id="证书">证书</h3><p><code>Certificates, Identifiers &amp; Profiles</code> -&gt; <code>Identifiers</code> -&gt; <code>指定Bundle ID</code> -&gt; <code>勾选并配置 Push Notifications</code> -&gt; <code>Production SSL Certificate</code> -&gt; 下载<code>.cer</code>证书安装</p><p>在钥匙串中导出<code>Apple Push Services: Bundle ID</code>为<code>.p12</code>；最好设置一下密码</p><h2 id="fix-Code-signing-“-framework”-failed-IPA-processing-failed-请使用xcframework重构framework"><s>fix Code signing “.framework” failed;IPA processing failed</s> 请使用xcframework重构framework</h2><p>add as (New Run Script Phase)</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Type a script or drag a script file from your workspace to insert its path.</span></span><br><span class="line">APP_PATH="${TARGET_BUILD_DIR}/${WRAPPER_NAME}"</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This script loops through the frameworks embedded <span class="keyword">in</span> the application and</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> removes unused architectures.</span></span><br><span class="line"></span><br><span class="line">find "$APP_PATH" -name '*.framework' -type d | while read -r FRAMEWORK</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">FRAMEWORK_EXECUTABLE_NAME=$(defaults read "$FRAMEWORK/Info.plist" CFBundleExecutable)</span><br><span class="line"></span><br><span class="line">FRAMEWORK_EXECUTABLE_PATH="$FRAMEWORK/$FRAMEWORK_EXECUTABLE_NAME"</span><br><span class="line"></span><br><span class="line">echo "Executable is $FRAMEWORK_EXECUTABLE_PATH"</span><br><span class="line"></span><br><span class="line">EXTRACTED_ARCHS=()</span><br><span class="line"></span><br><span class="line">for ARCH in $ARCHS</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">echo "Extracting $ARCH from $FRAMEWORK_EXECUTABLE_NAME"</span><br><span class="line"></span><br><span class="line">lipo -extract "$ARCH" "$FRAMEWORK_EXECUTABLE_PATH" -o "$FRAMEWORK_EXECUTABLE_PATH-$ARCH"</span><br><span class="line"></span><br><span class="line">EXTRACTED_ARCHS+=("$FRAMEWORK_EXECUTABLE_PATH-$ARCH")</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo "Merging extracted architectures: ${ARCHS}"</span><br><span class="line"></span><br><span class="line">lipo -o "$FRAMEWORK_EXECUTABLE_PATH-merged" -create "${EXTRACTED_ARCHS[@]}"</span><br><span class="line"></span><br><span class="line">rm "${EXTRACTED_ARCHS[@]}"</span><br><span class="line"></span><br><span class="line">echo "Replacing original executable with thinned version"</span><br><span class="line"></span><br><span class="line">rm "$FRAMEWORK_EXECUTABLE_PATH"</span><br><span class="line"></span><br><span class="line">mv "$FRAMEWORK_EXECUTABLE_PATH-merged" "$FRAMEWORK_EXECUTABLE_PATH"</span><br><span class="line"></span><br><span class="line">done</span><br></pre></td></tr></tbody></table></figure><h2 id="Xcode配置">Xcode配置</h2><h3 id="修改类的Copyright、类前缀">修改类的Copyright、类前缀</h3><p>TARGETS -&gt; General -&gt; File inspector(right panel) -&gt; Project Document 下就有版权信息和前缀修改</p><h3 id="修改默认语言为中文">修改默认语言为中文</h3><ol><li><code>info.plist</code> 添加或者修改<code>Localization native development region</code>值为<code>China</code>；<code> localized resources can be mixed</code>值为<code>yes</code></li><li>PROJECT -&gt; info -&gt; 添加简体中文语言包</li><li>右击<code>.xcodeproj</code>显示包内容，修改<code>project.pbxproj</code>中的<code>developmentRegion</code>为<code>zh-Hans</code></li><li>删除英文语言包后若需要再添加，确保中文语言包在首位</li></ol><h1>Swift 笔记</h1><h2 id="视图">视图</h2><h3 id="自适应容器的高度">自适应容器的高度</h3><p><strong>一个视图，包含n个子视图，如何才能自适应高度呢？</strong></p><ol><li>第一个子视图顶部对齐父视图</li><li>最后一个子视图底部对齐父视图</li><li>其余的子视图顶部依次对其上一个子视图的底部</li></ol><p>同理，横向改成左边/右边对齐</p><h3 id="类似微信相册的翻转动画">类似微信相册的翻转动画</h3><ol><li>预览页</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.navigationController<span class="operator">?</span>.pushViewController(vc, animated: <span class="literal">false</span>)</span><br><span class="line"><span class="comment">// 设置翻页动画为从右边翻上来</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> view <span class="operator">=</span> <span class="keyword">self</span>.navigationController<span class="operator">?</span>.view {</span><br><span class="line">    <span class="type">UIView</span>.transition(with: view, duration: <span class="number">1</span>, options: .transitionFlipFromRight, animations: <span class="literal">nil</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>从<code>vc</code>页跳回</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">done</span>()</span> {</span><br><span class="line">    <span class="comment">// 设置翻转动画为从左边翻上来</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> view <span class="operator">=</span> navigationController<span class="operator">?</span>.view {</span><br><span class="line">        <span class="type">UIView</span>.transition(with: view, duration: <span class="number">1</span>, options: .transitionFlipFromLeft, animations: <span class="literal">nil</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">self</span>.navigationController<span class="operator">?</span>.popViewController(animated: <span class="literal">false</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>改变动画时背景为黑色</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">view.backgroundColor <span class="operator">=</span> .black</span><br><span class="line">或者</span><br><span class="line"><span class="type">UIApplication</span>.shared.keyWindow<span class="operator">?</span>.backgroundColor <span class="operator">=</span> .black</span><br></pre></td></tr></tbody></table></figure><h3 id="CALayer-Core-Animation"><a href="http://www.cnblogs.com/kenshincui/p/3972100.html">CALayer &amp; Core Animation</a></h3><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击按钮弹性动画</span></span><br><span class="line"><span class="keyword">let</span> animation: <span class="type">CAKeyframeAnimation</span> <span class="operator">=</span> <span class="type">CAKeyframeAnimation</span>()</span><br><span class="line">animation.keyPath <span class="operator">=</span> <span class="string">"transform.scale"</span></span><br><span class="line">animation.values <span class="operator">=</span> [<span class="number">1.0</span>, <span class="number">1.3</span>, <span class="number">0.9</span>, <span class="number">1.0</span>]</span><br><span class="line">animation.duration <span class="operator">=</span> <span class="number">0.25</span></span><br><span class="line">animation.calculationMode <span class="operator">=</span> kCAAnimationCubic</span><br><span class="line">btn.layer.add(animation, forKey: <span class="literal">nil</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="UIView-和-XIB-的相关执行顺序">UIView 和 XIB 的相关执行顺序</h3><p>在controller中通过类方法获得一个关联的UIView（playView.swift／.xib）对象，其执行顺序为：</p><ol><li>由 instantiate 方法获得视图对象：let v = nib.instantiate(withOwner: self, options: nil)[0] as! PlayView</li><li>期间 instantiate 方法调用 awakeFromNib() 执行相应的操作，执行完后再接着执行 instantiate 方法后面的步骤</li><li>执行完获得UIView对象的类方法后，在执行 layoutSubviews() 设置视图大小</li></ol><h3 id="UIView的setNeedsLayout-layoutIfNeeded-和-layoutSubviews-方法之间的关系解释">UIView的setNeedsLayout, layoutIfNeeded 和 layoutSubviews 方法之间的关系解释</h3><ul><li>layoutSubviews在以下情况下会被调用：</li></ul><ol><li>init初始化不会触发layoutSubviews<br>但是是用initWithFrame 进行初始化时，当rect的值不为CGRectZero时,也会触发</li><li>addSubview会触发layoutSubviews</li><li>设置view的Frame会触发layoutSubviews，当然前提是frame的值设置前后发生了变化</li><li>滚动一个UIScrollView会触发layoutSubviews</li><li>旋转Screen会触发父UIView上的layoutSubviews事件</li><li>改变一个UIView大小的时候也会触发父UIView上的layoutSubviews事件</li></ol><ul><li>刷新子对象布局：</li></ul><ol><li>layoutSubviews方法：这个方法，默认没有做任何事情，需要子类进行重写</li><li>setNeedsLayout方法： 标记为需要重新布局，异步调用layoutIfNeeded刷新布局，不立即刷新，但layoutSubviews一定会被调用</li><li>layoutIfNeeded方法：如果，有需要刷新的标记，立即调用layoutSubviews进行布局（如果没有标记，不会调用layoutSubviews）</li><li>如果要立即刷新，要先调用[view setNeedsLayout]，把标记设为需要布局，然后马上调用[view layoutIfNeeded]，实现布局</li></ol><h3 id="语言国际化">语言国际化</h3><ol><li>在<code>PROJECT</code> -&gt; <code>Info</code> -&gt; <code>Localizations</code> 添加想要适配的语言。选中后去掉stroyboard的勾选去掉</li><li>在工程文件中创建新的文件右键<code>New File</code> -&gt; <code>Resource</code> -&gt; <code>Strings File</code>，取名为<code>Localizable.strings</code></li><li><code>.strings</code>下会多出两个字文件，分别对应英文和中文的Strings。如果没有，只需在右侧控制栏的<code>inspector</code>-&gt;<code>Localization</code>点击本地化即可</li><li>分别编写语言参数（注意：结尾要有<strong>分号<code>;</code></strong>）</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"hello"</span> <span class="operator">=</span> <span class="string">"你好"</span>; <span class="comment">//中文Strings</span></span><br><span class="line"><span class="string">"hello"</span> <span class="operator">=</span> <span class="string">"hello"</span>; <span class="comment">//英文Strings</span></span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>获取参数值</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSLocalizedString</span>(<span class="string">"hello"</span>, comment: <span class="string">"default"</span>) <span class="comment">//得到hello对应的值</span></span><br></pre></td></tr></tbody></table></figure><ol start="6"><li>快捷使用。新建<code>Localizable.swift</code>，声明多语言文字</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Localizable</span>: <span class="title">String</span> </span>{</span><br><span class="line">    <span class="keyword">case</span> hello</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> localized: <span class="type">String</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="type">NSLocalizedString</span>(rawValue, comment: <span class="string">""</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Localizable</span>.hello.localized)</span><br></pre></td></tr></tbody></table></figure><ol start="7"><li>若想修改项目显示名称，则创建<code>InfoPlist.strings</code>文件。只需在右侧控制栏的<code>inspector</code>-&gt;<code>Localization</code>点击本地化即可</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CFBundleDisplayName</span> <span class="operator">=</span> <span class="string">"project-name"</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="Xcode-本地化-修改默认的开发语言">Xcode 本地化 修改默认的开发语言</h3><ol><li><code>PROJECT</code> -&gt; <code>Info</code> -&gt; <code>Localizations</code>添加中文简体语言</li><li>在<code>Info.plist</code>中查找并设置<code>Localization Native Development Region</code>值为<code>China</code></li><li>关闭Xcode，右击<code>.xcodeproj</code>显示包内容，以文本形式打开<code>project.pbxproj</code>文件，查找并替换<code>developmentRegion</code>属性值为<code>zh-Hans</code></li><li>（可选）看情况删除<code>knownRegions</code>数组里的字段</li><li>保存后重启Xcode即可看到默认语言变更为中文简体</li></ol><h3 id="AVPlayer获取当前时间戳截图">AVPlayer获取当前时间戳截图</h3><ol><li>声明</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">var</span> player: <span class="type">AVPlayer</span>!</span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">var</span> playerItem: <span class="type">AVPlayerItem</span>?</span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">var</span> playerLayer: <span class="type">AVPlayerLayer</span>!</span><br><span class="line"><span class="keyword">fileprivate</span> <span class="keyword">var</span> videoOutput: <span class="type">AVPlayerItemVideoOutput</span> <span class="operator">=</span> <span class="type">AVPlayerItemVideoOutput</span>()</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>初始化播放控制url</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">playerItem <span class="operator">=</span> <span class="type">AVPlayerItem</span>(url: withURL)</span><br><span class="line">playerItem<span class="operator">?</span>.add(videoOutput)</span><br><span class="line">player.replaceCurrentItem(with: playerItem)</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>获取截图</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 获取当前时间的截图</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getCurrentImage</span>()</span> -&gt;<span class="type">UIImage</span>?{</span><br><span class="line">    <span class="keyword">let</span> itemTime <span class="operator">=</span> player.currentItem<span class="operator">?</span>.currentTime()</span><br><span class="line">    <span class="keyword">let</span> pixelBuffers <span class="operator">=</span> videoOutput.copyPixelBuffer(forItemTime: itemTime<span class="operator">!</span>, itemTimeForDisplay: <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> pixelBuffer <span class="operator">=</span> pixelBuffers <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">let</span> ciImage <span class="operator">=</span> <span class="type">CIImage</span>(cvPixelBuffer: pixelBuffer)</span><br><span class="line">    <span class="keyword">let</span> temporaryContext <span class="operator">=</span> <span class="type">CIContext</span>()</span><br><span class="line">    <span class="keyword">let</span> videoImage <span class="operator">=</span> temporaryContext.createCGImage(ciImage, from: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="type">CVPixelBufferGetWidth</span>(pixelBuffer), height: <span class="type">CVPixelBufferGetHeight</span>(pixelBuffer)))</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> image <span class="operator">=</span> videoImage <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="type">UIImage</span>(cgImage: image)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="屏幕方向控制：只允许部分横屏-info-plist中只支持竖屏">屏幕方向控制：只允许部分横屏(info.plist中只支持竖屏)</h3><ol><li><code>AppDelegate</code>是否允许横屏</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 是否锁定竖屏 默认 true</span></span><br><span class="line"><span class="keyword">var</span> isBlock <span class="operator">=</span> <span class="literal">true</span> {</span><br><span class="line">    <span class="keyword">didSet</span> {</span><br><span class="line">        <span class="keyword">if</span> isBlock {</span><br><span class="line">            changeOrientation(fullScreen: <span class="operator">!</span>isBlock)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span>(<span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>, <span class="params">supportedInterfaceOrientationsFor</span> <span class="params">window</span>: <span class="type">UIWindow</span>?)</span> -&gt; <span class="type">UIInterfaceOrientationMask</span> {</span><br><span class="line">    <span class="keyword">return</span> isBlock <span class="operator">?</span> .portrait : .allButUpsideDown</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 横竖屏切换</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeOrientation</span>(<span class="params">fullScreen</span>: <span class="type">Bool</span>)</span> {</span><br><span class="line">    <span class="keyword">if</span> fullScreen { <span class="comment">//横屏</span></span><br><span class="line">        <span class="keyword">if</span> <span class="type">UIApplication</span>.shared.statusBarOrientation.isLandscape {</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">let</span> resetOrientationTargert <span class="operator">=</span> <span class="type">NSNumber</span>(integerLiteral: <span class="type">UIInterfaceOrientation</span>.unknown.rawValue)</span><br><span class="line">        <span class="type">UIDevice</span>.current.setValue(resetOrientationTargert, forKey: <span class="string">"orientation"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> orientationTarget <span class="operator">=</span> <span class="type">NSNumber</span>(integerLiteral: <span class="type">UIInterfaceOrientation</span>.landscapeRight.rawValue)</span><br><span class="line">        <span class="type">UIDevice</span>.current.setValue(orientationTarget, forKey: <span class="string">"orientation"</span>)</span><br><span class="line"></span><br><span class="line">    }<span class="keyword">else</span> { <span class="comment">//竖屏</span></span><br><span class="line">        <span class="keyword">if</span> <span class="type">UIApplication</span>.shared.statusBarOrientation.isPortrait {</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">let</span> resetOrientationTargert <span class="operator">=</span> <span class="type">NSNumber</span>(integerLiteral: <span class="type">UIInterfaceOrientation</span>.unknown.rawValue)</span><br><span class="line">        <span class="type">UIDevice</span>.current.setValue(resetOrientationTargert, forKey: <span class="string">"orientation"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> orientationTarget <span class="operator">=</span> <span class="type">NSNumber</span>(integerLiteral: <span class="type">UIInterfaceOrientation</span>.portrait.rawValue)</span><br><span class="line">        <span class="type">UIDevice</span>.current.setValue(orientationTarget, forKey: <span class="string">"orientation"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>需要横屏的Controller中设置允许横屏</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// viewWillAppear</span></span><br><span class="line"><span class="keyword">let</span> delegate <span class="operator">=</span> <span class="type">UIApplication</span>.shared.delegate <span class="keyword">as!</span> <span class="type">AppDelegate</span></span><br><span class="line">delegate.isBlock <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">// ⚠️控制器结束后需要将横屏禁止(viewDidDisappear)</span></span><br><span class="line">delegate.isBlock <span class="operator">=</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>如需控制优先显示方向，改变排序即可</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>key<span class="operator">&gt;</span><span class="type">UISupportedInterfaceOrientations</span>&lt;/key&gt;</span><br><span class="line"><span class="operator">&lt;</span>array<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>string<span class="operator">&gt;</span><span class="type">UIInterfaceOrientationLandscapeRight</span>&lt;/string&gt;</span><br><span class="line"><span class="operator">&lt;</span>string<span class="operator">&gt;</span><span class="type">UIInterfaceOrientationLandscapeLeft</span>&lt;/string&gt;</span><br><span class="line"><span class="operator">&lt;/</span>array<span class="operator">&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="监听锁屏-解锁通知">监听锁屏/解锁通知</h3><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppDelegate</span> </span>{</span><br><span class="line">    <span class="operator">...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> isLockScreenKey <span class="operator">=</span> <span class="string">"isLockScreenKey"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">applicationProtectedDataWillBecomeUnavailable</span>(<span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>)</span> {</span><br><span class="line">        <span class="type">NotificationCenter</span>.default.post(name: .<span class="type">ScreenLockStateChanged</span>, object: <span class="literal">nil</span>, userInfo: [<span class="type">AppDelegate</span>.isLockScreenKey: <span class="literal">true</span>])</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">applicationProtectedDataDidBecomeAvailable</span>(<span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>)</span> {</span><br><span class="line">        <span class="type">NotificationCenter</span>.default.post(name: .<span class="type">ScreenLockStateChanged</span>, object: <span class="literal">nil</span>, userInfo: [<span class="type">AppDelegate</span>.isLockScreenKey: <span class="literal">false</span>])</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">Notification</span>.<span class="title">Name</span> </span>{</span><br><span class="line">    <span class="comment">/// 屏幕状态通知</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">ScreenLockStateChanged</span> <span class="operator">=</span> <span class="type">Notification</span>.<span class="type">Name</span>(<span class="string">"ScreenLockStateChanged"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="AVPlayer实现视频后台播放">AVPlayer实现视频后台播放</h3><p>对于实现后台播放视频的方法，我的理解是，iOS 是支持后台播放音频的，而 AVPlayer 在播放视频时，会将图像渲染在 layer 上，因此只要取消图像的渲染，只播放音频，就可以实现后台播放。</p><ol><li>在<code>info.plist</code>文件中添加权限</li></ol><figure class="highlight plist"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>UIBackgroundModes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>audio<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAppTransportSecurity<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAllowsArbitraryLoads<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>在播放控制类中添加监听<code>(从相关的AVPlayer删除AVPlayer(将AVPlayerLayer player属性设置为nil))</code></li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isVideoBackground</span>()</span> {</span><br><span class="line">    <span class="type">NotificationCenter</span>.default.addObserver(<span class="keyword">self</span>, selector: #selector(enterBackground), name: <span class="type">UIApplication</span>.didEnterBackgroundNotification, object: <span class="literal">nil</span>)</span><br><span class="line">    <span class="type">NotificationCenter</span>.default.addObserver(<span class="keyword">self</span>, selector: #selector(willForeground), name: <span class="type">UIApplication</span>.willEnterForegroundNotification, object: <span class="literal">nil</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">enterBackground</span>()</span> {</span><br><span class="line">    <span class="comment">// _player 是当前播放AVPlayer对象</span></span><br><span class="line">    <span class="comment">// _player = nil;</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">willForeground</span>()</span> {</span><br><span class="line">    <span class="comment">// temp 是_player的拷贝</span></span><br><span class="line">    <span class="comment">// _player = temp;</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="AVPlayer-实现倍速播放">AVPlayer 实现倍速播放</h3><ol><li>定义变量<code>rate</code>保存当前倍速</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 播放速率</span></span><br><span class="line"><span class="keyword">open</span> <span class="keyword">var</span> rate: <span class="type">Float</span> <span class="operator">=</span> <span class="number">1</span> {</span><br><span class="line">    <span class="keyword">didSet</span> {</span><br><span class="line">        queue.rate <span class="operator">=</span> rate</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>每当暂停后播放，都需要设置<code>rate</code>，因为暂停/播放都会修改<code>rate</code>值为<code>0/1</code></li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">play</span>()</span> {</span><br><span class="line">    queue.play()</span><br><span class="line">    queue.rate <span class="operator">=</span> rate</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="逻辑">逻辑</h2><h3 id="NSNotification通知的使用">NSNotification通知的使用</h3><ol><li>方式一：<ol><li>自定义通知类型</li></ol> <figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="type">WBUserShouldLoginNotification</span> <span class="operator">=</span> “<span class="type">WBUserShouldLoginNotification</span><span class="string">"</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>发送通知</li></ol> <figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NotificationCenter</span>.default.post(name: <span class="type">NSNotification</span>.<span class="type">Name</span>(rawValue: <span class="type">WBUserShouldLoginNotification</span>)</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>注册 通知监听</li></ol> <figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NotificationCenter</span>.default.addObserver(<span class="keyword">self</span>, selector: #selector(notificationMethod(n:)), name: <span class="type">NSNotification</span>.<span class="type">Name</span>(rawValue: <span class="type">WBUserShouldLoginNotification</span>), object: <span class="literal">nil</span>)</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>处理通知的方法</li></ol> <figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@objc</span> <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">notificationMethod</span>(<span class="params">n</span>: <span class="type">Notification</span>)</span>{</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>注销 通知监听</li></ol> <figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NotificationCenter</span>.default.removeObserver(<span class="keyword">self</span>)</span><br></pre></td></tr></tbody></table></figure></li><li>方式二：更加贴近官方文档<ol><li>自定义通知类型</li></ol> <figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSNotification</span>.<span class="title">Name</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">XXXNotification</span> <span class="operator">=</span> <span class="type">NSNotification</span>.<span class="type">Name</span>(<span class="string">"XXXNotification"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>发送通知</li></ol> <figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NotificationCenter</span>.default.post(name: .<span class="type">XXXNotification</span>, object: <span class="literal">nil</span>)</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>注册 通知监听</li></ol> <figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NotificationCenter</span>.default.addObserver(<span class="keyword">self</span>, selector: #selector(notificationMethod(n:)), name: .<span class="type">XXXNotification</span>, object: <span class="literal">nil</span>)</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>处理通知的方法</li></ol> <figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@objc</span> <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">notificationMethod</span>(<span class="params">n</span>: <span class="type">Notification</span>)</span>{</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> list <span class="operator">=</span> n.object <span class="keyword">as?</span> [<span class="type">Int</span>] <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>注销 通知监听</li></ol> <figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NotificationCenter</span>.default.removeObserver(<span class="keyword">self</span>)</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="自定义选择器Selector">自定义选择器Selector</h3><ol><li>声明<code>Selector</code></li><li>判断是否绑定选择器<code>responds(to:)</code></li><li>触发选择器<code>perform(, with: )</code></li></ol><h3 id="extension-也可以添加限定条件，使得只有特定情况实现-protocol-才能获得默认实现">extension 也可以添加限定条件，使得只有特定情况实现 protocol 才能获得默认实现</h3><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ForceTouchImagePreviewProtocol</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">UIView</span>  </span>{</span><br><span class="line">  <span class="comment">// 只针对 UIView 的默认实现。在这个实现里，self 为 UIView 类型，可以得到相应参数和方法。</span></span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> <span class="title">where</span> <span class="title">Element</span> :<span class="title">_ArrayType</span>, <span class="title">Element</span>.<span class="title">Generator</span>.<span class="title">Element</span> :<span class="title">Equatable</span>  </span>{</span><br><span class="line">  <span class="comment">// 对 数组的数组 类型的扩展，且数组中的元素是 Equatable</span></span><br><span class="line">  <span class="comment">// 其实 Array 不是 protocol。但可以看出对于 extension 的使用，已经不需要区分是 protocol 还是 class, struct, enum</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="OC-Swift-混编">OC &amp; Swift 混编</h3><ol><li>Swift 调用 objc<ol><li>桥接文件（ProjectName-Bridging-Header.h）：新建OC文件时自动生成，也可以自己新建Header file后，在 Targets–&gt;Build Settings–&gt;Swift Compiler - General–&gt;objc Bridging Header 配置文件路径（ProjectName/ProjectName-Bridging-Header.h）</li><li>使用时只需在桥接文件中导入头文件即可和 swift 一样使用</li></ol></li><li>objc 调用 Swift<ol><li>默认桥接文件（ProjectName-Swift.h）：在 Targets–&gt;Build Settings–&gt;Swift Compiler - General–&gt;objc Generated Interface Header Name 进行配置，默认文件名是工程名-Swift.h，一般不做改动</li><li>使用时首先在OC文件中要加上 #import “ProjectName-Swift.h”(名字组成:工程名-Swift)</li></ol></li><li>混编注意事项：</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于需要混编的Swift类添加@objc声明或继承NSObject或NSObject的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> </span>{</span><br><span class="line">    <span class="operator">…</span><span class="operator">..</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">// 如果要在objc类中使用TestClass类，应当将TestClass继承自NSObject或NSObject的子类，否则，引入ProductName-Swift.h之后，程序找不到对应类。</span></span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>更多</li></ol><ul><li><a href="http://blog.csdn.net/zlj_jeck/article/details/51503937">详解swift和OC以及C语言的混编</a></li><li><a href="https://www.jianshu.com/p/ca7ccbf18d4e">Swift 和 C 不得不说的故事</a></li><li><a href="https://www.cnblogs.com/XYQ-208910/p/5157673.html">iOS:Xcode7下创建 .a静态库 和 .framework静态库</a></li><li><a href="https://blog.csdn.net/gatieme/article/details/52730680">C++与C之间相互接口和库函数调用</a></li></ul><h3 id="指针">指针</h3><ul><li><a href="https://blog.csdn.net/zkh90644/article/details/52819002">Swift 3.0 中不安全的世界</a></li><li><a href="https://blog.csdn.net/qq_22879593/article/details/68945564">Swift3.0 指针</a></li><li><a href="https://www.jb51.net/article/103538.htm">Swift中的指针操作详解</a></li><li><a href="http://blog.csdn.net/zenny_chen/article/details/54846579">Swift 3.0与C语言指针类型的桥接</a></li></ul><h3 id="系统权限设置">系统权限设置</h3><p>常用的权限:</p><table><thead><tr><th>说明</th><th>权限</th><th>描述</th></tr></thead><tbody><tr><td>麦克风权限</td><td>Privacy - Microphone Usage Description</td><td>App需要您的同意，才能访问麦克风进行语音识别转换/录制音频，如禁止将无法识别语音转换/录制音频发送</td></tr><tr><td>相机权限</td><td>Privacy - Camera Usage Description</td><td>APP需要您的同意，才能访问相机进行拍摄/识别/视频通话，如禁止将无法拍摄/识别图片以及视频通话</td></tr><tr><td>保存相册权限</td><td>Privacy - Photo Library Additions Usage Description</td><td>App需要您的同意，才能将照片保存至相册，如禁止将无法保存图片</td></tr><tr><td>相册权限</td><td>Privacy - Photo Library Usage Description</td><td>APP需要您的同意，才能访问相册进行选择照片上传/发布信息，如禁止将无法上传选择照片上传/发布信息</td></tr><tr><td>通讯录权限</td><td>Privacy - Contacts Usage Description</td><td>APP需要您的同意，才能获取通讯录好友，如禁止将无法查看</td></tr><tr><td>蓝牙权限</td><td>Privacy - Bluetooth Peripheral Usage Description</td><td>APP需要您的同意，才能使用蓝牙播放/控制功能</td></tr><tr><td>语音转文字权限</td><td>Privacy - Speech Recognition Usage Description</td><td>APP需要您的同意，才能使用语音识别，如禁止将无法语音转文字</td></tr><tr><td>日历权限</td><td>Privacy - Calendars Usage Description</td><td>APP需要您的同意，才能添加任务到日历，如禁止将无法在日历中查看任务</td></tr><tr><td>定位权限</td><td>Privacy - Location When In Use Usage Description</td><td>APP需要您的同意，才能访问定位位置展示附近信息，如禁止将无法展示附近信息</td></tr><tr><td>定位权限</td><td>Privacy - Location Always Usage Description</td><td>APP需要您的同意，才能访问定位位置展示附近信息，如禁止将无法展示附近信息 <code>⚠️如非必要，不能申请该权限</code></td></tr></tbody></table><blockquote><p>定位的需要这么写，防止上架被拒。</p></blockquote><ul><li>网络访问权限</li></ul><blockquote><p>App Transport Security Settings -&gt; Allow Arbitrary Loads (true)</p></blockquote><h3 id="获取系统信息">获取系统信息</h3><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// swift 获取app版本号及 ios 版本号</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">versionCheck</span>()</span>{</span><br><span class="line">    <span class="keyword">let</span> infoDictionary <span class="operator">=</span> <span class="type">Bundle</span>.main.infoDictionary</span><br><span class="line">    <span class="keyword">let</span> appDisplayName <span class="operator">=</span> infoDictionary<span class="operator">!</span>[<span class="string">"CFBundleName"</span>]</span><br><span class="line">    <span class="keyword">let</span> majorVersion <span class="operator">=</span> infoDictionary<span class="operator">!</span>[<span class="string">"CFBundleShortVersionString"</span>] <span class="comment">// 主程序版本号</span></span><br><span class="line">    <span class="keyword">let</span> minorVersion <span class="operator">=</span> infoDictionary<span class="operator">!</span>[<span class="string">"CFBundleVersion"</span>] <span class="comment">// build 版本号</span></span><br><span class="line">    <span class="keyword">let</span> appversion <span class="operator">=</span> majorVersion <span class="keyword">as!</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> iosversion <span class="operator">=</span> <span class="type">UIDevice</span>.current.systemVersion   <span class="comment">// ios 版本</span></span><br><span class="line">    <span class="keyword">let</span> identifierNumber <span class="operator">=</span> <span class="type">UIDevice</span>.current.identifierForVendor   <span class="comment">// 设备 udid</span></span><br><span class="line">    <span class="keyword">let</span> deviceName <span class="operator">=</span> <span class="type">UIDevice</span>.current.name  <span class="comment">//获取设备名称</span></span><br><span class="line">    <span class="keyword">let</span> systemName <span class="operator">=</span> <span class="type">UIDevice</span>.current.systemName   <span class="comment">// 系统设备名称</span></span><br><span class="line">    <span class="keyword">let</span> model <span class="operator">=</span> <span class="type">UIDevice</span>.current.model   <span class="comment">// 设备型号</span></span><br><span class="line">    <span class="keyword">let</span> localizedModel <span class="operator">=</span> <span class="type">UIDevice</span>.current.localizedModel   <span class="comment">// 设备区域化型号 如 A1533</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"appDisplayName:<span class="subst">\(appDisplayName<span class="operator">!</span>)</span><span class="subst">\n</span>majorVersion:<span class="subst">\(majorVersion<span class="operator">!</span>)</span><span class="subst">\n</span>minorVersion:<span class="subst">\(minorVersion<span class="operator">!</span>)</span><span class="subst">\n</span>"</span>,</span><br><span class="line">        <span class="string">"appversion:<span class="subst">\(appversion)</span><span class="subst">\n</span>iosversion:<span class="subst">\(iosversion)</span><span class="subst">\n</span>identifierNumber:<span class="subst">\(identifierNumber<span class="operator">!</span>)</span><span class="subst">\n</span>systemName:<span class="subst">\(systemName)</span><span class="subst">\n</span>model:<span class="subst">\(model)</span><span class="subst">\n</span>localizedModel:<span class="subst">\(localizedModel)</span>"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="获取当前Wi-Fi名">获取当前Wi-Fi名</h3><p>在iOS 12 之后需要设置Xcode -&gt; [Project Name] -&gt; Targets -&gt; [Target Name] -&gt; Capabilities -&gt; Access WiFi Information -&gt; ON</p><p>在iOS 13 以后获取Wi-Fi需要满足以下条件之一</p><ul><li>使用定位功能，并且获得了定位服务权限的应用；</li><li>使用NEHotspotConfiguration配置过的Wi-Fi；</li><li>应用程序已安装有效的VPN配置</li></ul><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 获取当前Wi-Fi名</span></span><br><span class="line"><span class="comment">/// 1. #import &lt;SystemConfiguration/CaptiveNetwork.h&gt;</span></span><br><span class="line"><span class="comment">/// 2. Xcode -&gt; [Project Name] -&gt; Targets -&gt; [Target Name] -&gt; Capabilities -&gt; Access WiFi Information -&gt; ON</span></span><br><span class="line"><span class="comment">/// 3. iOS13以后必须定位</span></span><br><span class="line"><span class="comment">/// ```swift</span></span><br><span class="line"><span class="comment">/// private let manager = CLLocationManager()</span></span><br><span class="line"><span class="comment">/// manager.requestWhenInUseAuthorization()</span></span><br><span class="line"><span class="comment">/// ```</span></span><br><span class="line"><span class="keyword">var</span> currentSSID: <span class="type">String</span> {</span><br><span class="line">    <span class="keyword">let</span> interfaces <span class="operator">=</span> <span class="type">CNCopySupportedInterfaces</span>()</span><br><span class="line">    <span class="keyword">var</span> ssid <span class="operator">=</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> interfaces <span class="operator">!=</span> <span class="literal">nil</span> {</span><br><span class="line">        <span class="keyword">let</span> interfacesArray <span class="operator">=</span> <span class="type">CFBridgingRetain</span>(interfaces) <span class="keyword">as!</span> <span class="type">Array</span>&lt;<span class="type">AnyObject</span>&gt;</span><br><span class="line">        <span class="keyword">if</span> interfacesArray.count <span class="operator">&gt;</span> <span class="number">0</span> {</span><br><span class="line">            <span class="comment">//获取当前使用wifi</span></span><br><span class="line">            <span class="keyword">for</span> name <span class="keyword">in</span> interfacesArray {</span><br><span class="line">                <span class="keyword">let</span> interfaceName <span class="operator">=</span> name <span class="keyword">as!</span> <span class="type">CFString</span></span><br><span class="line">                <span class="keyword">let</span> ussafeInterfaceData <span class="operator">=</span> <span class="type">CNCopyCurrentNetworkInfo</span>(interfaceName)</span><br><span class="line">                <span class="keyword">if</span> (ussafeInterfaceData <span class="operator">!=</span> <span class="literal">nil</span>) {</span><br><span class="line">                    <span class="keyword">let</span> interfaceData <span class="operator">=</span> ussafeInterfaceData <span class="keyword">as!</span> [<span class="type">String</span>: <span class="keyword">Any</span>]</span><br><span class="line">                    ssid <span class="operator">=</span> interfaceData[<span class="string">"SSID"</span>]<span class="operator">!</span> <span class="keyword">as!</span> <span class="type">String</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ssid</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="关于-Swift-中重写-preferredStatusBarStyle-不起作用问题解决方案">关于 Swift 中重写 preferredStatusBarStyle 不起作用问题解决方案</h3><ul><li>首先需要在项目<code>targets</code>中的 <code>info.plist</code> 文件中将 <code>View controller-based status bar appearance</code> 删除;</li><li>如果<code>UIViewController</code>是存在于自定义的<code>UINavigationController</code>中，需要在自定义的<code>UINavigationController</code>中重写<code>childForStatusBarHidden</code>和<code>childForStatusBarStyle</code>两个方法: 因为这两个方法默认返回值是nil</li></ul><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重写这两个方法</span></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">var</span> childForStatusBarHidden: <span class="type">UIViewController</span>? {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.topViewController</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">var</span> childForStatusBarStyle: <span class="type">UIViewController</span>? {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.topViewController</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="TableView">TableView</h2><h3 id="自定义cell">自定义cell</h3><ol><li>从xib创建cell</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 新建一个空的 TestCell.xib 和 TestCell.swift 文件</span></span><br><span class="line"><span class="comment">// 2. 指定xib的 Custom Class 为 TestCell</span></span><br><span class="line"><span class="comment">// 3. 注册xib</span></span><br><span class="line">table.register(<span class="type">UINib</span>(nibName: <span class="string">"TestCell"</span>, bundle: <span class="literal">nil</span>), forCellReuseIdentifier: <span class="type">TestCellID</span>)</span><br><span class="line"><span class="comment">// 4. nib实例化只会调用</span></span><br><span class="line"><span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">awakeFromNib</span>() </span>{</span><br><span class="line">    <span class="keyword">super</span>.awakeFromNib()</span><br><span class="line">    setup()</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 5. 在tableView: cellForRowAtIndexPath: 中使用</span></span><br><span class="line"><span class="keyword">let</span> cell <span class="operator">=</span> tableView.dequeueReusableCell(withIdentifier: <span class="type">TestCellID</span>, for: indexPath) <span class="keyword">as!</span> <span class="type">TestCell</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>纯代码创建cell</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建 TestCell.swift</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestCell</span>: <span class="title">UITableViewCell</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">withTableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">reuseIdentifier</span>: <span class="type">String</span>? <span class="operator">=</span> <span class="literal">nil</span>)</span> -&gt; <span class="type">TestCell</span> {</span><br><span class="line">        <span class="keyword">let</span> identifier <span class="operator">=</span> reuseIdentifier <span class="operator">??</span> <span class="type">TestCell</span>.<span class="keyword">self</span>.description()</span><br><span class="line">        <span class="keyword">var</span> cell <span class="operator">=</span> tableView.dequeueReusableCell(withIdentifier: identifier) <span class="keyword">as?</span> <span class="type">TestCell</span></span><br><span class="line">        <span class="keyword">if</span> cell <span class="operator">==</span> <span class="literal">nil</span> {</span><br><span class="line">            cell <span class="operator">=</span> <span class="type">TestCell</span>(style: .default, reuseIdentifier: identifier)</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> cell<span class="operator">!</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不使用nib实例化只会调用</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">init</span>(<span class="params">style</span>: <span class="type">UITableViewCell</span>.<span class="type">CellStyle</span>, <span class="params">reuseIdentifier</span>: <span class="type">String</span>?)</span> {</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(style: style, reuseIdentifier: reuseIdentifier)</span><br><span class="line">        setup()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="function"><span class="keyword">init?</span>(<span class="params">coder</span> <span class="params">aDecoder</span>: <span class="type">NSCoder</span>)</span> {</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(coder: aDecoder)</span><br><span class="line">        setup()</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 2. 在tableView: cellForRowAtIndexPath: 中使用</span></span><br><span class="line"><span class="keyword">let</span> cell <span class="operator">=</span> <span class="type">TestCell</span>.withTableView(tableView)</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>设置ui</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setup</span>()</span> {</span><br><span class="line">    backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.clear</span><br><span class="line">    contentView.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.clear</span><br><span class="line">    selectionStyle <span class="operator">=</span> .none</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="属性问题">属性问题</h3><ul><li><code>table.tableFooterView = UIView()</code> 去除多余的分割线</li><li><code>table.separatorStyle = .none</code> 隐藏分割线</li></ul><h3 id="自定义xib大小无法改变时">自定义xib大小无法改变时</h3><p><code>Attributes inspector</code> -&gt; <code>Simulated metric</code>: Size：inferred -&gt; Size：Freeform</p><h3 id="tableview是否注册cell">tableview是否注册cell</h3><blockquote><p>如果不想手动初始化cell实例，则注册class/nib，使用注册时需要携带<code>indexPath</code>参数</p></blockquote><ol><li>基于class的注册，使用registerClass方法</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tableView.register(<span class="type">UITableViewCell</span>.<span class="keyword">self</span>, forCellReuseIdentifier: <span class="string">"identifier"</span>)</span><br><span class="line"><span class="comment">// 在tableView: cellForRowAtIndexPath: 中使用</span></span><br><span class="line">tableView.dequeueReusableCell(withIdentifier: <span class="string">"identifier"</span>, for: indexPath)</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>基于nib的注册，使用registerNib方法</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tableView.register(<span class="type">UINib</span>(nibName: <span class="string">"TestCell"</span>, bundle: <span class="literal">nil</span>), forCellReuseIdentifier: <span class="string">"identifier"</span>)</span><br><span class="line"><span class="comment">// 在tableView: cellForRowAtIndexPath: 中使用</span></span><br><span class="line">tableView.dequeueReusableCell(withIdentifier: <span class="string">"identifier"</span>, for: indexPath)</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>基于class的不注册，手动判别cell是否为空</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在tableView: cellForRowAtIndexPath: 中使用</span></span><br><span class="line"><span class="keyword">var</span> cell <span class="operator">=</span> tableView.dequeueReusableCell(withIdentifier: <span class="string">"identifier"</span>) <span class="keyword">as?</span> <span class="type">TestCell</span></span><br><span class="line"><span class="keyword">if</span> cell <span class="operator">==</span> <span class="literal">nil</span> {</span><br><span class="line">    cell <span class="operator">=</span> <span class="type">TestCell</span>(style: .default, reuseIdentifier: <span class="string">"identifier"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>基于nib的不注册，手动判别cell是否为空</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在tableView: cellForRowAtIndexPath: 中使用</span></span><br><span class="line"><span class="keyword">var</span> cell <span class="operator">=</span> tableView.dequeueReusableCell(withIdentifier: <span class="string">"identifier"</span>) <span class="keyword">as?</span> <span class="type">TestCell</span></span><br><span class="line"><span class="keyword">if</span> cell <span class="operator">==</span> <span class="literal">nil</span> {</span><br><span class="line">    cell <span class="operator">=</span> <span class="type">Bundle</span>.main.loadNibNamed(<span class="string">"TestCell"</span>, owner: <span class="keyword">self</span>, options: <span class="literal">nil</span>)<span class="operator">?</span>.last <span class="keyword">as?</span> <span class="type">TestCell</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="TableViewCell的性能优化">TableViewCell的性能优化</h3><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 离屏渲染 - 异步绘制</span></span><br><span class="line"><span class="keyword">self</span>.layer.drawsAsynchronously <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">// 栅格化 - 异步绘制之后，会生成一张独立的图像，cell在滚动的时候，本质上滚动的是这张图片</span></span><br><span class="line"><span class="comment">// cell优化，要尽量减少图层数量，相当于就只有一层</span></span><br><span class="line"><span class="comment">// 停止滚动之后，可以监听</span></span><br><span class="line"><span class="keyword">self</span>.layer.shouldRasterize <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">// 使用 ’珊格化‘需要指定分辨率，否则图像不清晰</span></span><br><span class="line"><span class="keyword">self</span>.layer.rasterizationScale <span class="operator">=</span> <span class="type">UIScreen</span>.main.scale</span><br></pre></td></tr></tbody></table></figure><ul><li>优点：绘制cell更快，更高效</li><li>缺点：离屏渲染需要在 GPU／CPU 之间快速切换<br>更加耗电</li></ul><h3 id="关闭导航栏自动缩进">关闭导航栏自动缩进</h3><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">#available</span>(<span class="keyword">iOS</span> <span class="number">11.0</span>, <span class="operator">*</span>) {</span><br><span class="line">    scroll.contentInsetAdjustmentBehavior <span class="operator">=</span> .never</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    automaticallyAdjustsScrollViewInsets <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="TableViewCell-设置间距，去除顶部间距">TableViewCell 设置间距，去除顶部间距</h3><ol><li>tableview 初始化<code>estimated</code>必须在view设置之前</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> table <span class="operator">=</span> <span class="type">UITableView</span>(frame: .zero, style: .grouped)</span><br><span class="line">table.estimatedSectionHeaderHeight <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">table.estimatedSectionFooterHeight <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">table.tableFooterView <span class="operator">=</span> <span class="type">UIView</span>()</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>代理设置间距</li></ol><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">heightForHeaderInSection</span> <span class="params">section</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">CGFloat</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.1</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">heightForFooterInSection</span> <span class="params">section</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">CGFloat</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="tableview-关闭延时点击">tableview 关闭延时点击</h3><blockquote><p>table.delaysContentTouches = false</p></blockquote><h3 id="UIScrollView-自动布局约束滚动">UIScrollView 自动布局约束滚动</h3><ol><li><p>添加一个scroll view</p></li><li><p>像普通视图一样为scroll view添加位置和大小的约束</p></li><li><p>在scroll view中添加一个子视图（content view），给该视图添加一个指定的标签（这个标签只是为了更好地显示）</p></li><li><p>将content view的left，right，top，bottom和scroll view的边界建立相等约束。那么现在content view的边界就确定了scroll view的内容区域</p></li></ol><blockquote><p>（注意此时content view还没有固定的大小，它可以根据你在其中设置的视图的伸缩大小）</p></blockquote><ol start="5"><li><p>（可选）如果不需要水平滑动，将content view的宽度设置为和scoll view的宽度相等。</p></li><li><p>（可选）如果不需要垂直滑动，将content view的高度设置为和scroll view的高度相等。</p></li></ol><p>在content view中添加子视图，为子视图和content view添加约束。</p><p>重要： 你的布局必须能够决定content view的大小（除非在5和6中已经设置过了）。如果要基于你的内容的固有尺寸来决定高度，那么在<em><strong>content view的top跟bottom之间必须有一条不间断的约束链</strong></em>。类似地，对于宽度，必须要在left和right间有不间断的约束链。如果你在content view中添加的内容（子视图）不具有固有尺寸，那么你要显式地为content view或者其内容确定好合适的尺寸。当content view的高度大于scroll view的高度，那么scroll view支持垂直方向的滑动。当content view的宽度大于scroll view的宽度，那么scoll view支持水平方向上的滑动。否则，默认滑动是被禁止的。</p><h3 id="iOS-UITableViewCell-中-调整imageView-的图片大小">iOS UITableViewCell 中 调整imageView 的图片大小</h3><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">cellForRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> -&gt; <span class="type">UITableViewCell</span> {</span><br><span class="line">        <span class="operator">...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改image大小 ⚠️若是网络图片必须在图片加载完成后再一次调用</span></span><br><span class="line">        <span class="keyword">let</span> itemSize <span class="operator">=</span> <span class="type">CGSize</span>(width: <span class="number">50</span>, height: <span class="number">50</span>)</span><br><span class="line">        <span class="type">UIGraphicsBeginImageContextWithOptions</span>(itemSize, <span class="keyword">_</span>: <span class="literal">false</span>, <span class="keyword">_</span>: <span class="type">UIScreen</span>.main.scale)</span><br><span class="line">        <span class="keyword">let</span> imageRect <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="number">0.0</span>, y: <span class="number">0.0</span>, width: itemSize.width, height: itemSize.height)</span><br><span class="line">        cell.imageView<span class="operator">?</span>.image<span class="operator">?</span>.draw(in: imageRect)</span><br><span class="line">        cell.imageView<span class="operator">?</span>.image <span class="operator">=</span> <span class="type">UIGraphicsGetImageFromCurrentImageContext</span>()</span><br><span class="line">        <span class="type">UIGraphicsEndImageContext</span>()</span><br><span class="line">        <span class="keyword">return</span> cell</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="UITableViewCell的分割线边距设置">UITableViewCell的分割线边距设置</h3><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">willDisplay</span> <span class="params">cell</span>: <span class="type">UITableViewCell</span>, <span class="params">forRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> {</span><br><span class="line">    <span class="keyword">if</span> cell.responds(to: #selector(setter: <span class="type">UITableView</span>.separatorInset)) {</span><br><span class="line">        cell.separatorInset <span class="operator">=</span> <span class="type">UIEdgeInsets</span>(top: <span class="number">0</span>, left: <span class="number">75</span>, bottom: <span class="number">0</span>, right: <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> indexPath.row <span class="operator">==</span> (conversationModel.dataList.count <span class="operator">-</span> <span class="number">1</span>) {</span><br><span class="line">            cell.separatorInset <span class="operator">=</span> .zero</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// responds(to: selector) 判断是否响应Selector</span></span><br><span class="line"><span class="comment">// perform(selector, with: target) 调用Selector并传递第一个参数</span></span><br></pre></td></tr></tbody></table></figure><h1>上架</h1><h2 id="备注说明">备注说明</h2><ol><li>如果有使用<code>VoIP</code>，需要提供演示视频说明</li><li>如果有使用<code>定位/后台</code>相关功能，也需要视频演示</li><li>如果有内购，需要提供内购账号密码，并加以描述<code>CNY 699元 是购买684金币</code></li><li>苹果登陆需要直接点击就可以使用app；若需要用户完善信息的，则需要提供能完整使用功能的测试账号</li><li>有金币等交易相关的商品，需要加入内购；可以只提供两个价格，一个最低，一个最高</li></ol><hr><p><strong>注：以上视频需要拼接为一个，以附件形式上传，最好200M以内</strong></p><h2 id="Regarding-Guideline-1-2-Safety-User-Generated-Content">Regarding Guideline 1.2 - Safety - User Generated Content</h2><p>反馈描述：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于用户上传的信息，我们有服务端的数据风控策略，会自动隐藏/封闭用户数据， 不需要做拉黑描述等</span><br></pre></td></tr></tbody></table></figure><p>如果app内部有投诉/举报相关功能，最好提供演示视频以说明</p><h2 id="xcode-构建版本被删除">xcode 构建版本被删除</h2><ol><li>隐私权限没有在info.plist里进行声明（⚠️查收appleid邮箱邮件</li><li>使用了Apple禁止使用的API</li><li>重新生成打包证书，retry!</li></ol>]]></content>
      
      
      <categories>
          
          <category> dev </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
